package com.dupr.pages.events;

import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.Month;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;

import com.b2b.support.B2BFindBy;
import com.b2b.support.B2BFindBys;
import com.b2b.support.B2BPageFactory;
import com.dupr.pages.DUPRBaseAutomationPage;

public class AddBracketPage extends DUPRBaseAutomationPage {
	private static final Logger log = LogManager.getLogger(AddBracketPage.class);

	@B2BFindBy(xpath = "//h1[text()='Add Brackets']")
	private WebElement lblAddBrackets;

	@B2BFindBy(xpath = "//h3[text()='Bracket Name']")
	private WebElement lblBracketName;

	@B2BFindBy(xpath = "//h3[text()='Type']")
	private WebElement lblType;

	@B2BFindBy(xpath = "//h3[text()='Type']/parent::div/div/div/div/div")
	private WebElement ddMatchType;

	@B2BFindBy(xpath = "//h3[text()='Type']/parent::div/div/div/div/div//following-sibling::input")
	private WebElement txtBoxType;

	@B2BFindBy(xpath = "//h3[text()='Player Group']/parent::div/div/div/div/div//following-sibling::input")
	private WebElement txtBoxPlayerGroup;

	@B2BFindBys(@B2BFindBy(xpath = "//h3[text()='Type']/parent::div/div/div/following-sibling::div/div/div"))
	private List<WebElement> lstType;

	@B2BFindBy(xpath = "//li[text()='Doubles']")
	private WebElement btnTypeDoubles;

	@B2BFindBy(xpath = "//li[text()='Singles']")
	private WebElement btnTypeSingles;

	@B2BFindBy(xpath = "//h3[text()='Player Group']")
	private WebElement lblPlayerGroup;

	@B2BFindBy(xpath = "//h3[text()='Player Group']/parent::div/div/div/div/div")
	private WebElement ddPlayerGroup;

	@B2BFindBy(xpath = "//h3[text()='Player Group']/parent::div/div/div/following-sibling::div/div/div")
	private List<WebElement> lstPlayerGroup;

	@B2BFindBy(xpath = "//li[text()='Open']")
	private WebElement btnOpenPlayerGroup;

	@B2BFindBy(xpath = "//li[text()='Mixed']")
	private WebElement btnMixedPlayerGroup;

	@B2BFindBy(xpath = "//li[text()='Men']")
	private WebElement btnMenPlayerGroup;

	@B2BFindBy(xpath = "//li[text()='Women']")
	private WebElement btnWomenPlayerGroup;

	@B2BFindBy(xpath = "//h3[text()='Match Type']/parent::div/div/div/div/div[@aria-label='Without label']")
	private WebElement ddMatchTypeInAddABracket;

	@B2BFindBy(xpath = "//button[contains(text(),'Save Changes')]")
	private WebElement btnSaveChanges;

	@B2BFindBy(xpath = "//h3[text()='Age Range']/parent::div/div/div/div/div/h5[text()='Minimum']/parent::div/following-sibling::div/div/div/input")
	private WebElement txtBoxMinAgeRange;

	@B2BFindBy(xpath = "//h3[text()='Age Range']/parent::div/div/div/div/div/h5[text()='Maximum']/parent::div/following-sibling::div/div/div/input")
	private WebElement txtBoxMaxAgeRange;

	@B2BFindBy(xpath = "//h3[text()='Rating Range']")
	private WebElement lblRatingRange;

	@B2BFindBy(xpath = "//h3[text()='Rating Range']/parent::div/div/div/div/div/h5[text()='Minimum']/parent::div/following-sibling::div/div/div/input")
	private WebElement txtBoxMinRatingRange;

	@B2BFindBy(xpath = "//h3[text()='Rating Range']/parent::div/div/div/div/div/h5[text()='Maximum']/parent::div/following-sibling::div/div/div/input")
	private WebElement txtBoxMaxRatingRange;

	@B2BFindBy(xpath = "//button[text()='Auto Generate']/parent::div")
	private WebElement btnAutoGenerate;

	@B2BFindBy(xpath = "//button[text()='Auto Generate' and @disabled]")
	private WebElement btnAutoGenerateDisabled;

	@B2BFindBy(xpath = "//h3[text()='Event Type']")
	private WebElement lblEventType;

	@B2BFindBy(xpath = "//h3[text()='Event Type']/parent::div/div/div/div/input")
	private WebElement ddEventType;

	@B2BFindBy(xpath = "//li[text()='Round Robin']")
	private WebElement btnRoundRobinEventType;

	@B2BFindBy(xpath = "//input[@value='ROUND_ROBIN']")
	private WebElement txtRoundRobin;

	@B2BFindBy(xpath = "//li[text()='Waterfall']")
	private WebElement btnWaterfallEventType;

	@B2BFindBy(xpath = "//button[text()='OK']")
	private WebElement btnOK;

	@B2BFindBy(xpath = "//h3[text()='Registration Date']")
	private WebElement lblRegistrationDate;

	@B2BFindBy(xpath = "//h3[text()='Registration Date']/parent::div/div/div/div/div/h5[text()='Start Date & Time']/parent::div/following-sibling::div/div/div")
	private WebElement btnRegistrationStartDate;

	@B2BFindBy(xpath = "//h3[text()='Registration Date']/following-sibling::div//h5[text()='Start Date & Time']/parent::div/following-sibling::div//input")
	private WebElement txtBoxRegistrationStartDate;

	@B2BFindBy(xpath = "//h3[text()='Registration Date']/parent::div/div/div/div/div/h5[text()='End Date & Time']/parent::div/following-sibling::div/div/div/input")
	private WebElement btnRegistrationEndDate;

	@B2BFindBy(xpath = "//h3[text()='Registration Date']/following-sibling::div//h5[text()='End Date & Time']/parent::div/following-sibling::div//input")
	private WebElement txtBoxRegistrationEndDate;

	@B2BFindBy(xpath = "//h3[text()='Competition Date']")
	private WebElement lblCompetitionDate;

	@B2BFindBy(xpath = "//h3[text()='Competition Date']/parent::div/div/div/div/div/h5[text()='Start Date & Time']/parent::div/following-sibling::div/div/div")
	private WebElement btnCompetitionStartDate;

	@B2BFindBy(xpath = "//h3[text()='Competition Date']/following-sibling::div//h5[text()='Start Date & Time']/parent::div/following-sibling::div//input")
	private WebElement txtBoxCompetitionStartDate;

	@B2BFindBy(xpath = "//div[contains(@class,'MuiPickersFadeTransitionGroup-root')]//div[contains(@class,'MuiPickersCalendarHeader-label')]")
	private WebElement lblMonth;

	@B2BFindBy(xpath = "//h3[text()='Competition Date']/parent::div/div/div/div/div/h5[text()='End Date & Time']/parent::div/following-sibling::div/div/div")
	private WebElement btnCompetitionEndDate;

	@B2BFindBy(xpath = "//h3[text()='Competition Date']/following-sibling::div//h5[text()='End Date & Time']/parent::div/following-sibling::div//input")
	private WebElement txtBoxCompetitionEndDate;

	@B2BFindBy(xpath = "//button[contains(@class, 'MuiButtonBase-root MuiPickersDay-root MuiPickersDay-dayWithMargin MuiPickersDay-today')]")
	private WebElement lnkToday;

	@B2BFindBy(xpath = "//span[@role='option' and @aria-label='3 hours']")
	private WebElement btnRegistrationDateTodayhours;

	@B2BFindBy(xpath = "//span[@role='option' and @aria-label='20 minutes']")
	private WebElement btnRegDateTodayMinutes;

	@B2BFindBy(xpath = "//button[@aria-label='calendar view is open, switch to year view']")
	private WebElement ddRegistrationEndDate;

	@B2BFindBy(xpath = "//button[text()='2024']")
	private WebElement btnRegEndDateNextYear;

	@B2BFindBy(xpath = "//button[text()='2025']")
	private WebElement btnRegCompetitionStartDateNextYear;

	@B2BFindBy(xpath = "//button[text()='2026']")
	private WebElement btnRegCompetitionEndDateNextYear;

	@B2BFindBy(xpath = "//button[text()='9']")
	private WebElement btnRegEndDateNextYearSelectDate;

	@B2BFindBy(xpath = "//button[text()='18']")
	private WebElement btnRegCompetitionStartDateNextYearSelectDate;

	@B2BFindBy(xpath = "//span[text()='9']")
	private WebElement btnRegEndDateNextYearSelectDateTime;

	@B2BFindBy(xpath = "//span[text()='05' and @aria-label='05 minutes']")
	private WebElement btnTimeInMinutes;

	@B2BFindBy(xpath = "//span[text()='00']")
	private WebElement btnDefaultTimeInMinutes;

	@B2BFindBy(xpath = "//h3[text()='Time Zone']")
	private WebElement lblTimeZone;

	@B2BFindBy(xpath = "//h3[text()='Time Zone']/parent::div/div/div/div")
	private WebElement ddTimeZone;

	@B2BFindBy(xpath = "//li[contains(text(), '(GMT+05:30) Chennai, Kolkata, Mumbai, New Delhi') or @value='Asia/Kolkata']")
	private WebElement btnNewDelhiTimeZone;

	@B2BFindBy(xpath = "//ul[contains(@class,'MuiList-root MuiList-padding MuiMenu-list')]")
	private WebElement ddListTimeZone;

	@B2BFindBy(xpath = "//li[contains(@class,'MuiButtonBase-root MuiMenuItem-root MuiMenuItem-gutters MuiMenuItem-root MuiMenuItem-gutters css-xo32vf')]")
	private List<WebElement> lstTimeZone;

	@B2BFindBy(xpath = "//li[text()='(GMT-06:00) Central America']")
	private WebElement btnCentralAmericaTimeZone;

	@B2BFindBy(xpath = "//li[text()='(GMT-11:00) Coordinated Universal Time-11']")
	private WebElement btnCoordinatedUniversalTime;

	@B2BFindBy(xpath = "//li[text()='(GMT-10:00) Hawaii']")
	private WebElement btnHawaiiTime;

	@B2BFindBy(xpath = "//li[text()='(GMT-09:00) Alaskan Standard Time']")
	private WebElement btnAlaskanStandardTime;

	@B2BFindBy(xpath = "//li[text()='(GMT-08:00) Pacific Standard Time (US & Canada)']")
	private WebElement btnPacificStandardTime;

	@B2BFindBy(xpath = "//li[text()='(GMT-07:00) Arizona']")
	private WebElement btnArizona;

	@B2BFindBy(xpath = "//input[@value='America/Belize']")
	private WebElement btnCentralAmericaTimeTime;

	@B2BFindBy(xpath = "//li[text()='(GMT-06:00) Saskatchewan']")
	private WebElement btnSaskatchewanTime;

	@B2BFindBy(xpath = "//li[text()='(GMT-05:00) Bogota, Lima, Quito']")
	private WebElement btnBogotaLimaQuitoTime;

	@B2BFindBy(xpath = "//li[text()='(GMT-05:00) Eastern Time (US & Canada)']")
	private WebElement btnEasternTime;

	@B2BFindBy(xpath = "//h3[text()='Bracket Price']")
	private WebElement lblBracketPrice;

	@B2BFindBy(xpath = "//h3[text()='Bracket Price']/parent::div/div/div/div/div/h5[text()='Club Member Price']/parent::div/following-sibling::div/div/div/div/following-sibling::input")
	private WebElement txtBoxClubMemberPrice;

	@B2BFindBy(xpath = "//h3[text()='Bracket Price']/parent::div/div/div/div/div/h5[text()='Club nonmember Price']/parent::div/following-sibling::div/div/div/div/following-sibling::input")
	private WebElement txtBoxNonClubMemberPrice;

	@B2BFindBy(xpath = "//h3[text()='Number of Teams']")
	private WebElement lblNumberOfTeams;

	@B2BFindBy(xpath = "//h3[contains(text(),'Number of Courts')]//following-sibling::div//input")
	private WebElement txtBoxNumberOfCourts;

	@B2BFindBy(xpath = "//h3[text()='Waitlist']")
	private WebElement lblWaitlist;

	@B2BFindBy(xpath = "//button[text()='Go Back']")
	private WebElement btnGoBack;

	@B2BFindBy(xpath = "//h2[text()='Bracket #1']/parent::div/parent::div/parent::div")
	private WebElement drpBracket1;

	@B2BFindBy(xpath = "//p[text()='Registration start date and time is required.']")
	private WebElement msgRegStartDateRequired;

	@B2BFindBy(xpath = "//p[text()='Registration end date and time is required.']")
	private WebElement msgRegEndDateRequired;

	@B2BFindBy(xpath = "//p[text()='Registration end date must be after registration start date.']")
	private WebElement msgRegEndDateofPrevStartDate;

	@B2BFindBy(xpath = "//p[text()='Competition end date should be higher than competition start date.']")
	private WebElement msgCompEndDateofPrevStartDate;

	@B2BFindBy(xpath = "//p[text()='Competition start date and time is required.']")
	private WebElement msgCompStartDateRequired;

	@B2BFindBy(xpath = "//p[text()='Competition end date and time is required.']")
	private WebElement msgCompEndDateRequired;

	@B2BFindBy(xpath = "//p[text()='Competition start date should be higher than Registration end date.']")
	private WebElement msgCompStartDateHighRegEndDate;

	@B2BFindBy(xpath = "//p[contains(text(),'Number of court should be between 1 & 8.')]")
	private WebElement lblNumberOfCourtsValidation;

	@B2BFindBy(xpath = "//h3[text()='Number of Teams']/parent::div/div/div/div/div/div/input")
	private WebElement txtBoxNumberOfTeams;

	@B2BFindBy(xpath = "//h3[text()='Waitlist']/parent::div/div/div/div/div/div/input")
	private WebElement txtBoxWaitlist;

	@B2BFindBy(xpath = "//button[text()='No, Continue to Summary']")
	private WebElement btnNoContinueToSummary;

	@B2BFindBy(xpath = "//h4[text()='Add Another Bracket?']")
	private WebElement lblAddAnotherBracket;

	@B2BFindBy(xpath = "//h2[text()='Event Details']/parent::div/button")
	private WebElement btnEditEventDetails;

	@B2BFindBy(xpath = "//button[text()='Publish Event']")
	private WebElement btnPublishEvent;

	@B2BFindBy(xpath = "//h4[text()='Success']")
	private WebElement lblEventSuccess;

	@B2BFindBy(xpath = "//h4[text()='Your event is now published.']")
	private WebElement lblYourEventIsNowPublished;

	@B2BFindBy(xpath = "//h4[text()='Success']/button")
	private WebElement lblEventSuccessClosePopup;

	@B2BFindBy(xpath = "//button[text()='Ok']")
	private WebElement btnSuccessOk;

	@B2BFindBy(xpath = "//button[text()='Add Another Bracket']")
	private WebElement btnAddAnotherBracket;

	@B2BFindBy(xpath = "//button[text()='Delete Bracket']")
	private WebElement btnDeleteBracket;

	@B2BFindBy(xpath = "//h1[text()='Summary']")
	private WebElement lblSummaryText;

	@B2BFindBy(xpath = "//h2[text()='Event Details']/parent::div")
	private WebElement lblEventDetailswithEditIcon;

	@B2BFindBy(xpath = "//h4[text()='Event Name']")
	private WebElement lblEventNameText;

	@B2BFindBy(xpath = "//h4[text()='Event Logo']")
	private WebElement lblEventLobgo;

	@B2BFindBy(xpath = "//h4[text()='Member Entry fee']")
	private WebElement lblMemberEntryFeeText;

	@B2BFindBy(xpath = "//h4[text()='Nonmember Entry Fee']")
	private WebElement lblNonMemberEntryFee;

	@B2BFindBy(xpath = "//h4[text()='Membership Permissions']")
	private WebElement lblMembershipPermission;

	@B2BFindBy(xpath = "//h4[text()='Description']")
	private WebElement lblDescriptionText;

	@B2BFindBy(xpath = "//h2[text()='Event Policies']//parent::div[@class='MuiBox-root css-8v90jo']")
	private WebElement lblEventPolicieswithEditIcon;

	@B2BFindBy(xpath = "//h4[text()='Liability Waiver']")
	private WebElement lblLiabilityWaiver;

	@B2BFindBy(xpath = "//h4[text()='Refund Policy']")
	private WebElement lblRefundPolicy;

	@B2BFindBy(xpath = "//h4[text()='Health & Safety Policy']")
	private WebElement lblHealthAndSafetyPolicy;

	@B2BFindBy(xpath = "//h2[text()='Brackets']")
	private WebElement lblBrackets;

	@B2BFindBy(xpath = "//h2[contains(text(),'Brackets')]/parent::div/following-sibling::div/div/button")
	private WebElement btnEditBracket;

	@B2BFindBy(xpath = "//h4[text()='Registration Start Date ']")
	private WebElement lblRegistrationStartDate;

	@B2BFindBy(xpath = "//h4[text()='Registration End Date']")
	private WebElement lblRegistrationEndDate;

	@B2BFindBy(xpath = "//h4[text()='Competition Start Date']")
	private WebElement lblCompetitionStartDate;

	@B2BFindBy(xpath = "//h4[text()='Competition End Date']")
	private WebElement lblCompetitionEndDate;

	@B2BFindBy(xpath = "//h4[text()='Club Member Price']")
	private WebElement lblClubMemberPrice;

	@B2BFindBy(xpath = "//h4[text()='Non Club Member Price']")
	private WebElement lblClubNonMemberPrice;

	@B2BFindBy(xpath = "//h4[text()='Waitlist Allowance']")
	private WebElement lblWaitlistAllowance;

	@B2BFindBy(xpath = "//h4[text()='Age Minimum']")
	private WebElement lblMinimumAge;

	@B2BFindBy(xpath = "//h4[text()='Age Maximum']")
	private WebElement lblMaximumAge;

	@B2BFindBy(xpath = "//h4[text()='Ratings Minimum']")
	private WebElement lblMinimumRating;

	@B2BFindBy(xpath = "//h4[text()='Ratings Maximum']")
	private WebElement lblMaximumRating;

	@B2BFindBy(xpath = "//h2[contains(text(),'Event Details')]/following-sibling::button")
	private WebElement btnEditIconEventDetails;

	@B2BFindBy(xpath = "//h2[contains(text(),'Event Policies')]/following-sibling::button")
	private WebElement btnEditEventPolicies;

	@B2BFindBy(xpath = "//button[@aria-label='close']")
	private WebElement btnClose;

	@B2BFindBy(xpath = "//h2[text()='Bracket #2']")
	private WebElement lblBracket2;

	@B2BFindBy(xpath = "(//button[text()='Delete Bracket'])[1]")
	private WebElement btnDelteBracket;

	@B2BFindBy(xpath = "//h4[text()='Delete Bracket']")
	private WebElement lblDeleteBracket;

	@B2BFindBy(xpath = "//button[text()='Cancel']")
	private WebElement btnCancel;

	@B2BFindBy(xpath = "//button[text()='Confirm']")
	private WebElement btnConfirm;

	@B2BFindBy(xpath = "//h4[text()='You have successfully deleted this bracket']")
	private WebElement lblBracketDeleteSuccess;

	@B2BFindBy(xpath = "//h3[text()='Event']")
	private WebElement lblEvent;

	@B2BFindBy(xpath = "(//button[contains(@class,'MuiIconButton-root MuiIconButton-sizeMedium') and @type='button'])[2]")
	private WebElement btnBack;

	@B2BFindBy(xpath = "//button[text()='Next Step']")
	private WebElement btnNextStep;

	@B2BFindBy(xpath = "//button[contains(text(),'Exit')]")
	private WebElement btnExit;

	// Add Bracket Negative scenarios xpaths

	@B2BFindBy(xpath = "//p[contains(text(),'*Contains Errors')]")
	private WebElement msgContainsErrors;

	@B2BFindBy(xpath = "//p[contains(text(),'Bracket Type is required')]")
	private WebElement msgBracketTypeRequired;

	@B2BFindBy(xpath = "//p[contains(text(),'Player group is required')]")
	private WebElement msgPlayerGroupRequired;

	@B2BFindBy(xpath = "//p[text()='Number of Court is required.']")
	private WebElement msgNoOfCourtsRequired;

	@B2BFindBy(xpath = "//p[text()='Minimum age is required.']")
	private WebElement msgMinAgeRequired;

	@B2BFindBy(xpath = "//p[text()='Maximum age is required.']")
	private WebElement msgMaxAgeRequired;

	@B2BFindBy(xpath = "//p[text()='Minimum rating is required.']")
	private WebElement msgMinRatingRequired;

	@B2BFindBy(xpath = "//p[text()='Maximum rating is required.']")
	private WebElement msgMaxRatingRequired;

	@B2BFindBy(xpath = "//p[contains( text(),'Bracket name is required')]")
	private WebElement msgBracketNameRequired;

	@B2BFindBy(xpath = "//p[contains( text(),'Event Type is required')]")
	private WebElement msgEventTypeRequired;

	@B2BFindBy(xpath = "//p[text()='Registration start date and time is required.']")
	private WebElement msgRegistrationStartDateRequired;

	@B2BFindBy(xpath = "//p[text()='Registration end date and time is required.']")
	private WebElement msgRegistrationEndDateRequired;

	@B2BFindBy(xpath = "//p[text()='Competition start date and time is required.']")
	private WebElement msgCompetitionStartDateRequired;

	@B2BFindBy(xpath = "//p[text()='Competition end date and time is required.']")
	private WebElement msgCompetitionEndRequired;

	@B2BFindBy(xpath = "//p[contains( text(),'Timezone is required.')]")
	private WebElement msgTimeZoneRequired;

	@B2BFindBy(xpath = "//p[contains(text(),'Club member price is required.')]")
	private WebElement msgClubMemberPriceRequired;

	@B2BFindBy(xpath = "//p[contains(text(),'Club non-member price is required.')]")
	private WebElement msgClubNonMemberPrice;

	@B2BFindBy(xpath = "//p[text()='Number of Teams is required.']")
	private WebElement msgNumberOfTeamsRequired;

	@B2BFindBy(xpath = "//p[text()='Waitlist is required.']")
	private WebElement msgWaitListRequired;

	@B2BFindBy(xpath = "//h3[text()='Age Range']/parent::div//h5[text()='Minimum']/parent::div//following-sibling::div//input")
	private WebElement txtAgeRangeMinimum;

	@B2BFindBy(xpath = "//span[@class='MuiTouchRipple-root css-w0pj6f']/parent::button[text()='Next Step']")
	private WebElement btnBracketNextStep;

	@B2BFindBy(xpath = "//p[contains(text(),'Minimum age should be 2 years.')]")
	private WebElement msgMinAgeValidation;

	@B2BFindBy(xpath = "//p[contains(text(),'Maximum age should be 105 years')]")
	private WebElement msgMaxAgeValidation;

	@B2BFindBy(xpath = "//p[contains(text(),'Maximum age should be 105 years')]")
	private WebElement msgMinAgeInMaxValidation;

	@B2BFindBy(xpath = "//p[contains(text(),'Maximum age should be higher than minimum age')]")
	private WebElement msgMaxAgeIsHigherThanMinValidation;

	@B2BFindBy(xpath = "//p[contains(text(),'Maximum rating should be 8.')]")
	private WebElement msgMinRatingRange;

	@B2BFindBy(xpath = "//p[contains(text(),'Maximum rating should be higher than minimum rating.')]")
	private WebElement msgMaximumRatingRange;

	@B2BFindBy(xpath = "//p[contains(text(),'Minimum rating should be 2')]")
	private WebElement msgMinRatingRangeValidation;

	@B2BFindBy(xpath = "//h3[text()='Bracket Name']/following-sibling::div//input")
	private WebElement lblBracketNameAutoGenerate;

	@B2BFindBy(xpath = "//h5[contains(text(),'Club nonmember Price')]/parent::div/following-sibling::div/div/p[contains(text(),'Price should be either 0 or greater than 1.00.')]")
	private WebElement msgBracketClubnonmemPrice;

	@B2BFindBy(xpath = "//h5[contains(text(),'Club Member Price')]/parent::div/following-sibling::div/div/p[contains(text(),'Price should be either 0 or greater than 1.00.')]")
	private WebElement msgBracketClubMemPrice;

	@B2BFindBy(xpath = "//p[text()='Minimum teams should be 2.']")
	private WebElement msgBracketNumberOfTeamsValidation;

	@B2BFindBy(xpath = "//p[text()='Maximum 100 teams can join the bracket.']")
	private WebElement msgBracketNumberOfTeamsMaxValidation;

	@B2BFindBy(xpath = "//p[text()='Minimum 0 teams can join the waitlist']")
	private WebElement msgBracketWaitlistNegativeValidation;

	@B2BFindBy(xpath = "//p[text()='Maximum 50 teams can join the waitlist']")
	private WebElement msgBracketWaitlistMaxValidation;

	@B2BFindBy(xpath = "//p[contains(text(),'Please select different match type')]")
	private WebElement msgMixedGroupSinglesValidation;

	@B2BFindBy(xpath = "//h3[contains(text(),'Number of Courts')]//following-sibling::div//input[@disabled]")
	private WebElement txtBoxNumberOfCourtsDisabled;

	@B2BFindBy(xpath = "//h3[contains(text(),'Number of Teams')]//following-sibling::div//input[@value='16' and @disabled]")
	private WebElement txtWaterFallNumberOfTeams;

	@B2BFindBy(xpath = "//input[@value='16' and @disabled]")
	private WebElement txtBoxNumberOfTeamsDisabled;

	@B2BFindBy(xpath = "//div[contains(@class,'MuiAccordionSummary-expandIconWrapper Mui-expanded')]")
	private WebElement ddBracketCaretIcon;

	@B2BFindBy(xpath = "//div[contains(@class, 'MuiButtonBase-root MuiAccordionSummary-root Mui-expanded MuiAccordionSummary-gutters')]")
	private WebElement ddBracket;

	public AddBracketPage(WebDriver driver) {
		super(driver);
		B2BPageFactory.initElements(driver, this);
	}

	public boolean isAddBracketPageContains() {
		log.info("Starting of isAddBracketPageContains method");

		boolean isAddBracketPageContains = false;

		if (btnNextStep.isDisplayed() && btnDeleteBracket.isDisplayed() && btnExit.isDisplayed()
				&& btnGoBack.isDisplayed() && lblAddBrackets.isDisplayed()) {
			isAddBracketPageContains = true;
		}

		log.info("Ending of isAddBracketPageContains method");

		return isAddBracketPageContains;
	}

	public void clickOnMatchTypeDropdown() {
		log.info("Starting of clickOnMatchTypeDropdown method");

		try {
			if (ddBracket.isDisplayed() == true) {
				log.info("***Bracket dropdown is expanded***");
			}
		} catch (Exception e) {
			clickUsingActionsClass(drpBracket1);
		}

		scrollDown(-200);
		hardWait(2);
		clickUsingActionsClass(ddMatchType);
		hardWait(2);

		log.info("Ending of clickOnMatchTypeDropdown method");
	}

	public boolean isMatchTypeListContains() {
		log.info("Starting of isMatchTypeListContains method");

		hardWait(2);
		boolean isMatchTypeListContains = false;

		if (btnTypeDoubles.isDisplayed() && btnTypeSingles.isDisplayed()) {
			isMatchTypeListContains = true;
		}

		log.info("Ending of isMatchTypeListContains method");

		return isMatchTypeListContains;
	}

	public boolean isSelectedMatchTypeDisplayed() {
		log.info("Starting of isSelectedMatchTypeDisplayed method");

		hardWait(2);
		boolean BracketType = false;

		try {
			if (txtBoxType.getAttribute("value").equals("DOUBLES")) {
				log.debug(txtBoxType.getAttribute("value").equals("DOUBLES"));
				BracketType = true;
			} else if (txtBoxType.getAttribute("value").equals("SINGLES")) {
				log.debug(txtBoxType.getAttribute("value").equals("SINGLES"));
				BracketType = true;
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		log.info("Ending of isSelectedMatchTypeDisplayed method");

		return BracketType;
	}

	public void selectSinglesMatchType() {
		log.info("Starting of selectSinglesMatchType method");

		hardWait(2);
		elementClick(btnTypeSingles);

		log.info("Ending of selectSinglesMatchType method");
	}

	public void selectDoublesMatchType() {
		log.info("Starting of selectDoublesMatchType method");

		hardWait(2);
		elementClick(btnTypeDoubles);

		log.info("Ending of selectDoublesMatchType method");
	}

	public void clickOnPlayGroupDropdown() {
		log.info("Starting of clickOnPlayGroupDropdown method");

		try {
			ddPlayerGroup.click();
		} catch (Exception e) {
			clickOnElementUsingActionClass(ddPlayerGroup);
		}

		log.info("Ending of clickOnPlayGroupDropdown method");
	}

	public boolean isPlayerGroupListDisplayed() {
		log.info("Starting of isPlayerGroupListDisplayed method");
		hardWait(2);
		boolean isPlayerGroupListDisplayed = false;

		if (btnMixedPlayerGroup.isDisplayed() && btnOpenPlayerGroup.isDisplayed() && btnMenPlayerGroup.isDisplayed()
				&& btnWomenPlayerGroup.isDisplayed()) {

			isPlayerGroupListDisplayed = true;
		}

		log.info("Ending of isPlayerGroupListDisplayed method");

		return isPlayerGroupListDisplayed;
	}

	public void selectMixedPlayerGroup() {
		log.info("Starting of selectMixedPlayerGroup method");

		elementClick(btnMixedPlayerGroup);

		log.info("Ending of selectMixedPlayerGroup method");
	}

	public void selectOpenPlayerGroup() {
		log.info("Starting of selectOpenPlayerGroup method");

		elementClick(btnOpenPlayerGroup);

		log.info("Ending of selectOpenPlayerGroup method");
	}

	public boolean isSelectedPlayerGroupTypeDisplayed() {
		log.info("Starting of isSelectedPlayerGroupTypeDisplayed method");
		hardWait(2);
		boolean PlayerGroupType = false;
		try {
			if (txtBoxPlayerGroup.getAttribute("value").equals("MIXED")) {
				System.out.println(txtBoxPlayerGroup.getAttribute("value").equals("MIXED"));
				PlayerGroupType = true;
			} else if (txtBoxPlayerGroup.getAttribute("value").equals("OPEN")) {
				System.out.println(txtBoxPlayerGroup.getAttribute("value").equals("OPEN"));
				PlayerGroupType = true;
			} else if (txtBoxPlayerGroup.getAttribute("value").equals("MEN")) {
				System.out.println(txtBoxPlayerGroup.getAttribute("value").equals("MEN"));
				PlayerGroupType = true;
			} else {
				PlayerGroupType = txtBoxPlayerGroup.getAttribute("value").equals("WOMEN");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		log.info("Ending of isSelectedPlayerGroupTypeDisplayed method");

		return PlayerGroupType;
	}

	public boolean isEnteredMinimumAgeDisplayed(String minage) {
		log.info("Starting of isEnteredMinimumAgeDisplayed method");

		boolean MinimumAge = false;
		try {
			if (txtBoxMinAgeRange.getAttribute("value").equals(minage)) {
				System.out.println(txtBoxMinAgeRange.getAttribute("value").equals(minage));
				MinimumAge = true;
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		log.info("Ending of isEnteredMinimumAgeDisplayed method");

		return MinimumAge;
	}

	public void setMinimumAgeRange(String ageRangeMinimum) {
		log.info("Starting of setMinimumAgeRange method");

		this.txtBoxMinAgeRange.sendKeys(Keys.CONTROL + "a", Keys.BACK_SPACE);
		try {
			clickOnElementUsingActionClass(txtBoxMinAgeRange);
		} catch (Exception e) {
			elementClick(txtBoxMinAgeRange);
		}

		txtBoxMinAgeRange.sendKeys(ageRangeMinimum);

		log.info("Ending of setMinimumAgeRange method");
	}

	public boolean isEnteredMaximumAgeDisplayed(String maxage) {
		log.info("Starting of isEnteredMaximumAgeDisplayed method");

		boolean MaximumAge = false;
		try {
			if (txtBoxMaxAgeRange.getAttribute("value").equals(maxage)) {
				System.out.println(txtBoxMaxAgeRange.getAttribute("value").equals(maxage));
				MaximumAge = true;
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		log.info("Ending of isEnteredMaximumAgeDisplayed method");

		return MaximumAge;
	}

	public void setMaximumAgeRange(String ageRangeMaximum) {
		log.info("Starting of setMaximumAgeRange method");

		this.txtBoxMaxAgeRange.sendKeys(Keys.CONTROL + "a", Keys.BACK_SPACE);
		try {
			clickOnElementUsingActionClass(txtBoxMaxAgeRange);
		} catch (Exception e) {
			elementClick(txtBoxMaxAgeRange);
		}

		txtBoxMaxAgeRange.sendKeys(ageRangeMaximum);

		log.info("Ending of setMaximumAgeRange method");
	}

	public void setMinimumRatingRange(String ageRatingRangeMinimum) {
		log.info("Starting of setMinimumRatingRange method");

		this.txtBoxMinRatingRange.sendKeys(Keys.CONTROL + "a", Keys.BACK_SPACE);

		try {
			clickOnElementUsingActionClass(txtBoxMinRatingRange);
		} catch (Exception e) {
			elementClick(txtBoxMinRatingRange);
		}

		txtBoxMinRatingRange.sendKeys(ageRatingRangeMinimum);

		log.info("Ending of setMinimumRatingRange method");
	}

	public boolean isEnteredMinimumRatingRangeDisplayed(String minrating) {
		log.info("Starting of isEnteredMinimumRatingRangeDisplayed method");

		boolean MinimumRatingRange = false;
		try {
			if (txtBoxMinRatingRange.getAttribute("value").equals(minrating)) {
				System.out.println(txtBoxMinRatingRange.getAttribute("value").equals(minrating));
				MinimumRatingRange = true;
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		log.info("Ending of isEnteredMinimumRatingRangeDisplayed method");

		return MinimumRatingRange;
	}

	public void setMaximumRatingRange(String maxRatingRange) {
		log.info("Starting of setMaximumRatingRange method");

		this.txtBoxMaxRatingRange.sendKeys(Keys.CONTROL + "a", Keys.BACK_SPACE);

		try {
			clickOnElementUsingActionClass(txtBoxMaxRatingRange);
		} catch (Exception e) {
			elementClick(txtBoxMaxRatingRange);
		}

		txtBoxMaxRatingRange.sendKeys(maxRatingRange);

		log.info("Ending of setMaximumRatingRange method");
	}

	public boolean isEnteredMaximumRatingRangeDisplayed(String maxrating) {
		log.info("Starting of isEnteredMaximumRatingRangeDisplayed method");

		boolean MaximumRatingRange = false;
		try {
			if (txtBoxMaxRatingRange.getAttribute("value").equals(maxrating)) {
				System.out.println(txtBoxMaxRatingRange.getAttribute("value").equals(maxrating));
				MaximumRatingRange = true;
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		log.info("Ending of isEnteredMaximumRatingRangeDisplayed method");

		return MaximumRatingRange;
	}

	public boolean isAutoGenerateButtonEnabled() {
		log.info("Starting of isAutoGenerateButtonEnabled method");

		hardWait(2);
		scrollDown(200);
		this.waitForElementToBeVisible(btnAutoGenerate);
		log.info("Ending of isAutoGenerateButtonEnabled method");

		return btnAutoGenerate.isEnabled();
	}

	public boolean isAutoGenerateButtonDisabled() {
		log.info("Starting of isAutoGenerateButtonDisabled method");

		hardWait(2);
		log.info("Ending of isAutoGenerateButtonDisabled method");

		return btnAutoGenerateDisabled.isDisplayed();
	}

	public boolean isNumberOfTeamsDisabledState() {
		log.info("Starting of isNumberOfTeamsDisabledState method");

		hardWait(2);
		log.info("Ending of isNumberOfTeamsDisabledState method");

		return txtBoxNumberOfTeamsDisabled.isDisplayed();
	}

	public void clickOnAutoGenerateButton() {
		log.info("Starting of clickOnAutoGenerateButton method");

		hardWait(4);
		btnAutoGenerate.click();

		log.info("Ending of clickOnAutoGenerateButton method");
	}

	public void clickOnEventTypeDropdown() {
		log.info("Starting of clickOnEventTypeDropdown method");

		scrollDown(300);
		try {
			clickOnElementUsingActionClass(ddEventType);
		} catch (Exception e) {
			ddEventType.click();
		}
		hardWait(2);

		log.info("Ending of clickOnEventTypeDropdown method");
	}

	public boolean isEventTypeListContains() {
		log.info("Starting of isEventTypeListContains method");

		boolean isEventTypeListContains = false;

		if (btnRoundRobinEventType.isDisplayed() && btnWaterfallEventType.isDisplayed()) {
			isEventTypeListContains = true;
		}

		log.info("Ending of isEventTypeListContains method");

		return isEventTypeListContains;
	}

	public void selectRoundRobinEvent() {
		log.info("Starting of selectRoundRobinEvent method");

		elementClick(btnRoundRobinEventType);

		log.info("Ending of selectRoundRobinEvent method");
	}

	public void selectWaterfallEventType() {
		log.info("Starting of selectWaterfallEventType method");

		elementClick(btnWaterfallEventType);

		log.info("Ending of selectWaterfallEventType method");
	}

	public boolean isSelectedEventTypeDisplayed() {
		log.info("Starting of isSelectedEventTypeDisplayed method");

		boolean EventType = false;
		try {
			if (ddEventType.getAttribute("value").equalsIgnoreCase("ROUND_ROBIN")) {
				System.out.println(txtRoundRobin.getAttribute("value").equalsIgnoreCase("ROUND_ROBIN"));
				EventType = true;
			} else {
				EventType = ddEventType.getAttribute("value").equalsIgnoreCase("COMPASS");
				System.out.println(btnWaterfallEventType.getAttribute("value").equalsIgnoreCase("COMPASS"));

			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		log.info("Ending of isSelectedEventTypeDisplayed method");

		return EventType;
	}

	public void setFutureRegistrationStartDate() {
		log.info("Starting of clickOnRegistrationStartDate method");

		hardWait(2);
		try {
			clickOnElementUsingActionClass(btnRegistrationStartDate);
		} catch (Exception e) {
			btnRegistrationStartDate.click();
		}

		elementClick(btnRegCompetitionStartDateNextYearSelectDate);
		clickOnElementUsingActionClass(btnRegEndDateNextYearSelectDateTime);
		clickOnElementUsingActionClass(btnTimeInMinutes);

		log.info("Ending of clickOnRegistrationStartDate method");
	}

	public void setRegistrationStartDate() {
		log.info("Starting of setRegistrationStartDate method");

		try {
			clickOnWebElement(txtBoxRegistrationStartDate);
		} catch (Exception e) {
			clickOnElementUsingActionClass(txtBoxRegistrationStartDate);
		}

		int date = this.getCurrentDate();
		String hours = this.getCurrentHour();
		String meridiem = this.getCurrentMeridiem();

		hardWait(4);
		this.clickOnCurrentDate(date);
		System.out.println("*** Clicked on Date ***");

		hardWait(3);
		this.clickOnCurrentTime(meridiem);
		System.out.println("*** Clicked on Meridiem ***");
		hardWait(3);
		try {
			try {
				clickUsingActionsClass(driver.findElement(By.xpath("//span[contains(text(),'" + hours + "')]")));
			} catch (Exception e) {
				clickOnWebElement(driver.findElement(By.xpath("//span[contains(text(),'" + hours + "')]")));
			}
			System.out.println("*** Clicked on Hour ***");
			clickUsingActionsClass(btnDefaultTimeInMinutes);
			System.out.println("*** Clicked on Minutes ***");
			hardWait(2);
		} catch (Exception e) {
			System.out.println();
			clickOnElementUsingActionClass(btnTimeInMinutes);
		}

		log.info("Ending of setRegistrationStartDate method");
	}

	public void setFutureRegistrationEndDate() {
		log.info("Starting of clickOnRegistrationEndDate method");

		hardWait(2);
		try {
			clickOnElementUsingActionClass(btnRegistrationEndDate);
			hardWait(2);
		} catch (Exception e) {
			btnRegistrationEndDate.click();
		}

		hardWait(2);
		clickOnElementUsingActionClass(ddRegistrationEndDate);
		clickOnElementUsingActionClass(btnRegEndDateNextYear);
		elementClick(btnRegCompetitionStartDateNextYearSelectDate);
		clickOnElementUsingActionClass(btnRegEndDateNextYearSelectDateTime);
		clickOnElementUsingActionClass(btnTimeInMinutes);

		log.info("Ending of clickOnRegistrationEndDate method");
	}

	public void setRegistrationEndDate() {
		log.info("Starting of setRegistrationEndDate method");
		hardWait(2);

		try {
			clickOnElementUsingActionClass(txtBoxRegistrationEndDate);
		} catch (Exception e) {
			clickOnWebElement(txtBoxRegistrationEndDate);
		}

		int date = this.getFutureDate(1);
		Month monthValue = this.getFutureMonth(1);
		String mValue = monthValue.toString();
		System.out.println(mValue);
		String hours = this.getCurrentHour();
		System.out.println(hours);
		String meridiem = this.getCurrentMeridiem();

		String lblmonth = lblMonth.getText();
		String monthvalue = String.valueOf(lblmonth.split(" ")[0]).toUpperCase().trim();
		log.debug("Text is " + monthvalue);

		try {
			if ((mValue).equals(monthvalue)) {
				hardWait(4);
				this.clickOnCurrentDate(date);
			} else {
				try {
					clickOnWebElement(driver.findElement(By.xpath("//button[@title='Next month']")));
				} catch (Exception e) {
					clickUsingActionsClass(driver.findElement(By.xpath("//button[@title='Next month']")));
				}
				this.clickOnCurrentDate(date);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		hardWait(3);
		this.clickOnCurrentTime(meridiem);
		hardWait(4);
		try {
			clickUsingActionsClass(driver.findElement(By.xpath("//span[contains(text(),'" + hours + "')]")));
		} catch (Exception e) {
			clickOnWebElement(driver.findElement(By.xpath("//span[contains(text(),'" + hours + "')]")));
		}
		hardWait(2);
		try {
			clickOnElementUsingActionClass(btnTimeInMinutes);
		} catch (Exception e) {
			clickOnWebElement(btnTimeInMinutes);
		}
		try {
			if (btnOK.isDisplayed() == true) {
				this.clickOnWebElement(btnOK);
			}
		} catch (Exception e) {
			log.info("*** OK Button Haven't displayed***");
		}

		log.info("Ending of setRegistrationEndDate method");
	}

	public void setInvalidRegistrationStartDate() {
		log.info("Starting of setInvalidRegistrationStartDate method");

		scrollDown(200);
		clickOnWebElement(txtBoxRegistrationStartDate);

		try {
			int date = this.getFutureDate(1);
			String hours = this.getCurrentHour();
			String meridiem = this.getCurrentMeridiem();

			hardWait(2);
			this.clickOnCurrentDate(date);
			hardWait(2);
			this.clickOnCurrentTime(meridiem);

			hardWait(2);
			this.clickOnCurrentTime(hours);
			clickOnElementUsingActionClass(btnTimeInMinutes);
			hardWait(2);

			try {
				if (btnOK.isDisplayed() == true) {
					this.clickOnWebElement(btnOK);
				}
			} catch (Exception e) {
				log.info("*** OK Button Haven't displayed***");
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		log.info("Ending of setInvalidRegistrationStartDate method");
	}

	public void setInvalidRegistrationEndDate() {
		log.info("Starting of setInvalidRegistrationEndDate method");

		clickOnWebElement(txtBoxRegistrationEndDate);

		int date = this.getCurrentDate();
		String hours = this.getCurrentHour();
		String meridiem = this.getCurrentMeridiem();

		hardWait(2);
		this.clickOnCurrentDate(date);
		hardWait(2);
		this.clickOnCurrentTime(meridiem);
		hardWait(2);
		this.clickOnCurrentTime(hours);
		hardWait(2);
		clickOnElementUsingActionClass(btnTimeInMinutes);

		hardWait(2);
		try {
			if (btnOK.isDisplayed() == true) {
				this.clickOnWebElement(btnOK);
			}
		} catch (Exception e) {
			log.info("*** OK Button Haven't displayed***");
		}

		log.info("Ending of setInvalidRegistrationEndDate�method");
	}

	public void setInvalidCompetitionStartDate() {
		log.info("Starting of setInvalidCompetitionStartDate method");

		clickOnElementUsingActionClass(txtBoxCompetitionStartDate);

		int date = this.getFutureDate(1);
		String hours = this.getCurrentHour();
		String meridiem = this.getCurrentMeridiem();

		this.clickOnCurrentDate(date);
		this.clickOnCurrentTime(meridiem);
		this.clickOnCurrentTime(hours);
		clickOnElementUsingActionClass(btnTimeInMinutes);

		try {
			if (btnOK.isDisplayed() == true) {
				this.clickOnWebElement(btnOK);
			}
		} catch (Exception e) {
			log.info("*** OK Button Haven't displayed***");
		}

		log.info("Ending of setInvalidCompetitionStartDate�method");
	}

	public void setInvalidCompetitionEndDate() {
		log.info("Starting of setInvalidCompetitionEndDate method");

		clickOnElementUsingActionClass(txtBoxCompetitionEndDate);

		int date = this.getCurrentDate();
		String hours = this.getCurrentHour();
		String meridiem = this.getCurrentMeridiem();

		this.clickOnCurrentDate(date);
		this.clickOnCurrentTime(meridiem);
		this.clickOnCurrentTime(hours);
		clickOnElementUsingActionClass(btnTimeInMinutes);

		try {
			if (btnOK.isDisplayed() == true) {
				this.clickOnWebElement(btnOK);
			}
		} catch (Exception e) {
			log.info("*** OK Button Haven't displayed***");
		}

		log.info("Ending of setInvalidCompetitionEndDates�method");
	}

	public void setIncorrectCompetitionStartDate() {
		log.info("Starting of setIncorrectCompetitionStartDate method");

		clickOnElementUsingActionClass(txtBoxCompetitionStartDate);

		int date = this.getCurrentDate();
		String hours = this.getCurrentHour();
		String meridiem = this.getCurrentMeridiem();

		this.clickOnCurrentDate(date);
		this.clickOnCurrentTime(meridiem);
		this.clickOnCurrentTime(hours);
		clickOnElementUsingActionClass(btnTimeInMinutes);

		try {
			if (btnOK.isDisplayed() == true) {
				this.clickOnWebElement(btnOK);
			}
		} catch (Exception e) {
			log.info("*** OK Button Haven't displayed***");
		}

		log.info("Ending of setIncorrectCompetitionStartDate�method");
	}

	public void setCompetitionStartDate() {
		log.info("Starting of setCompetitionStartDate method");

		hardWait(3);
		try {
			clickOnElementUsingActionClass(txtBoxCompetitionStartDate);
		} catch (Exception e) {
			clickOnWebElement(txtBoxCompetitionStartDate);
		}

		int date = this.getFutureDate(2);
		Month monthValue = this.getFutureMonth(2);
		String mValue = monthValue.toString();
		System.out.println(mValue);
		String hours = this.getCurrentHour();
		System.out.println(hours);
		String meridiem = this.getCurrentMeridiem();

		String lblmonth = lblMonth.getText();
		String monthvalue = String.valueOf(lblmonth.split(" ")[0]).toUpperCase().trim();
		log.debug("Text is " + monthvalue);
		this.hardWait(3);
		try {
			if ((mValue).equals(monthvalue)) {
				this.hardWait(3);
				this.clickOnCurrentDate(date);
			} else {
				this.hardWait(3);
				clickUsingActionsClass(driver.findElement(By.xpath("//button[@title='Next month']")));

				this.clickOnCurrentDate(date);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		this.clickOnCurrentTime(meridiem);
		this.clickOnCurrentTime(hours);
		clickOnElementUsingActionClass(btnTimeInMinutes);
		try {
			if (btnOK.isDisplayed() == true) {
				this.clickOnWebElement(btnOK);
			}
		} catch (Exception e) {
			log.info("*** OK Button Haven't displayed***");
		}

		log.info("Ending of setCompetitionStartDate�method");
	}

	public void setCompetitionEndDate() {
		log.info("Starting of setCompetitionEndDate method");

		try {
			clickOnElementUsingActionClass(txtBoxCompetitionEndDate);
		} catch (Exception e) {
			clickOnWebElement(txtBoxCompetitionEndDate);
		}

		int date = this.getFutureDate(3);
		Month monthValue = this.getFutureMonth(3);
		String mValue = monthValue.toString();
		System.out.println(mValue);
		String hours = this.getCurrentHour();
		System.out.println(hours);
		String meridiem = this.getCurrentMeridiem();

		String lblmonth = lblMonth.getText();
		String monthvalue = String.valueOf(lblmonth.split(" ")[0]).toUpperCase().trim();
		log.debug("Text is " + monthvalue);
		this.hardWait(3);

		try {
			if ((mValue).equals(monthvalue)) {
				this.hardWait(3);
				this.clickOnCurrentDate(date);
			} else {
				this.hardWait(3);
				clickUsingActionsClass(driver.findElement(By.xpath("//button[@title='Next month']")));

				this.clickOnCurrentDate(date);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		this.clickOnCurrentTime(meridiem);

		System.out.println(driver.findElement(By.cssSelector("div>span[aria-label='" + hours + " hours']")));
		WebElement currentHourValue = driver.findElement(By.cssSelector("div>span[aria-label='" + hours + " hours']"));

		try {
			this.hardWait(2);
			Actions action = new Actions(driver);
			action.moveToElement(currentHourValue).contextClick(currentHourValue).build().perform();
		} catch (Exception e) {
			clickOnWebElement(driver.findElement(By.cssSelector("div>span[aria-label='" + hours + " hours']")));
		}

		clickOnElementUsingActionClass(btnTimeInMinutes);

		try {
			if (btnOK.isDisplayed() == true) {
				this.clickOnWebElement(btnOK);
			}
		} catch (Exception e) {
			log.info("*** OK Button Haven't displayed***");
		}

		log.info("Ending of setCompetitionEndDate�method");
	}

	public void clickOnCompetitionStartDate() {
		log.info("Starting of clickOnCompetitionStartDate method");

		hardWait(2);
		try {
			clickOnElementUsingActionClass(btnCompetitionStartDate);
			hardWait(2);
			btnCompetitionStartDate.click();
		} catch (Exception e) {
			e.printStackTrace();

		}

		hardWait(2);
		clickOnElementUsingActionClass(ddRegistrationEndDate);

		hardWait(2);
		elementClick(btnRegCompetitionStartDateNextYear);
		elementClick(btnRegCompetitionStartDateNextYearSelectDate);
		clickOnElementUsingActionClass(btnRegEndDateNextYearSelectDateTime);
		clickOnElementUsingActionClass(btnTimeInMinutes);

		log.info("Ending of clickOnCompetitionStartDate method");
	}

	public void clickOnCompetitionEndDate() {
		log.info("Starting of clickOnCompetitionEndDate method");

		hardWait(2);

		try {
			clickOnElementUsingActionClass(btnCompetitionEndDate);
			hardWait(2);
			btnCompetitionEndDate.click();
		} catch (Exception e) {
			e.printStackTrace();
		}

		hardWait(2);
		clickOnElementUsingActionClass(ddRegistrationEndDate);
		hardWait(2);

		elementClick(btnRegCompetitionEndDateNextYear);
		clickOnElementUsingActionClass(btnRegCompetitionStartDateNextYearSelectDate);
		clickOnElementUsingActionClass(btnRegEndDateNextYearSelectDateTime);
		clickOnElementUsingActionClass(btnTimeInMinutes);

		log.info("Ending of clickOnCompetitionEndDate method");
	}

	public void setTimeZone() {
		log.info("Starting of setTimeZone method");

		hardWait(2);
		try {
			clickOnElementUsingActionClass(ddTimeZone);
		} catch (Exception e) {
			ddTimeZone.click();
		}
		this.waitForElementToBeVisible(btnNewDelhiTimeZone);
		elementClick(btnNewDelhiTimeZone);

		log.info("Ending of setTimeZone method");
	}

	public void clickOnTimeZoneDropdown() {
		log.info("Starting of clickOnTimeZoneDropdown method");

		hardWait(2);
		scrollDown(400);
		try {
			clickOnElementUsingActionClass(ddTimeZone);
		} catch (Exception e) {
			clickOnWebElement(ddTimeZone);
		}

		log.info("Ending of clickOnTimeZoneDropdown method");
	}

	public boolean isTimeZoneListContains() {
		log.info("Starting of isTimeZoneListContains method");
		hardWait(2);
		log.info("Ending of isTimeZoneListContains method");

		return ddListTimeZone.isDisplayed();
	}

	public void clickOnNewDelhiTimeZone() {
		log.info("Starting of clickOnNewDelhiTimeZone method");
		hardWait(9);
		try {
			scrollIntoView(btnNewDelhiTimeZone);
			hardWait(3);
			clickUsingActionsClass(btnNewDelhiTimeZone);
		} catch (Exception e) {
			hardWait(3);
			elementClick(btnNewDelhiTimeZone);
		}

		log.info("Ending of clickOnNewDelhiTimeZone method");
	}

	public boolean isSelectedTimeZoneDisplayed() {
		log.info("Starting of isSelectedTimeZoneDisplayed method");

		boolean TimeZone = false;
		try {
			if (btnNewDelhiTimeZone.getAttribute("value").equals("Asia/Kolkata")) {
				System.out.println(btnNewDelhiTimeZone.getAttribute("value").equals("Asia/Kolkata"));
				TimeZone = true;
			}
		} catch (Exception e) {
			TimeZone = false;
		}

		log.info("Ending of isSelectedTimeZoneDisplayed method");

		return TimeZone;
	}

	public float setBracketClubMemberPrice(String clubMemberPrice) {
		log.info("Starting of setBracketClubMemberPrice method");

		scrollDown(300);
		try {
			clickUsingActionsClass(txtBoxClubMemberPrice);
		} catch (Exception e) {
			clickOnWebElement(txtBoxClubMemberPrice);
		}

		txtBoxClubMemberPrice.sendKeys(Keys.CONTROL + "a", Keys.BACK_SPACE);
		txtBoxClubMemberPrice.sendKeys(clubMemberPrice);
		String clubMemberPrice1 = txtBoxClubMemberPrice.getAttribute("value");
		float clubMemberPrice2 = Float.parseFloat(clubMemberPrice1);
		log.info("Ending of setBracketClubMemberPrice method");

		return clubMemberPrice2;
	}

	public boolean isEnteredClubMemberPriceDisplayed(String clubmemberprice) {
		log.info("Starting of isEnteredClubMemberPriceDisplayed method");

		boolean clubMemberPriceDisplayed = false;
		try {
			if (txtBoxClubMemberPrice.getAttribute("value").equals(clubmemberprice)) {
				System.out.println(txtBoxClubMemberPrice.getAttribute("value").equals(clubmemberprice));
				clubMemberPriceDisplayed = true;
			}
		} catch (Exception e) {
			clubMemberPriceDisplayed = false;
		}

		log.info("Ending of isEnteredClubMemberPriceDisplayed method");

		return clubMemberPriceDisplayed;
	}

	public float setBracketNonClubMemberPrice(String nonclubMemberPrice) {
		log.info("Starting of setBracketNonClubMemberPrice method");

		try {
			clickUsingActionsClass(txtBoxNonClubMemberPrice);
		} catch (Exception e) {
			clickOnWebElement(txtBoxNonClubMemberPrice);
		}

		txtBoxNonClubMemberPrice.sendKeys(Keys.CONTROL + "a", Keys.BACK_SPACE);
		txtBoxNonClubMemberPrice.sendKeys(nonclubMemberPrice);
		String nonclubMemberPrice1 = txtBoxNonClubMemberPrice.getAttribute("value");
		float nonclubMemberPrice2 = Float.parseFloat(nonclubMemberPrice1);
		log.info("Ending of setBracketNonClubMemberPrice method");
		return nonclubMemberPrice2;
	}

	public boolean isEnteredClubNonMemberPriceDisplayed(String clubnonmemberprice) {
		log.info("Starting of isEnteredClubNonMemberPriceDisplayed method");

		boolean clubNonMemberPriceDisplayed = false;
		try {
			if (txtBoxNonClubMemberPrice.getAttribute("value").equals(clubnonmemberprice)) {
				System.out.println(txtBoxNonClubMemberPrice.getAttribute("value").equals(clubnonmemberprice));
				clubNonMemberPriceDisplayed = true;
			}
		} catch (Exception e) {
			clubNonMemberPriceDisplayed = false;
		}

		log.info("Ending of isEnteredClubNonMemberPriceDisplayed method");

		return clubNonMemberPriceDisplayed;
	}

	public void setNumberOfTeams(String numberOfTeams) {
		log.info("Starting of setNumberOfTeams method");

		scrollDown(300);
		clickUsingActionsClass(txtBoxNumberOfTeams);
		int teamsFieldValue = txtBoxNumberOfTeams.getAttribute("value").length();
		try {

			log.debug("Number of teams value length: " + teamsFieldValue);

			while (teamsFieldValue != 0) {
				teamsFieldValue = txtBoxNumberOfTeams.getAttribute("value").length();
				System.out.println(teamsFieldValue);

				clickUsingActionsClass(txtBoxNumberOfTeams);
				txtBoxNumberOfTeams.sendKeys(Keys.BACK_SPACE);

				System.out.println(teamsFieldValue = txtBoxNumberOfTeams.getAttribute("value").length());
			}
		} catch (Exception e) {
			Actions action = new Actions(driver);
			action.moveToElement(txtBoxNumberOfTeams).sendKeys(Keys.CONTROL + "a", Keys.BACK_SPACE).build().perform();
		}
		hardWait(2);
		txtBoxNumberOfTeams.sendKeys(numberOfTeams);

		log.info("Ending of setNumberOfTeams method");
	}

	public boolean isNumberOfTeamsDisplayed() {
		log.info("Starting of isNumberOfTeamsDisplayed method");
		log.info("Ending of isNumberOfTeamsDisplayed method");

		return txtBoxNumberOfTeams.isEnabled();
	}

	public boolean isNumberOfTeamsCountDisplayed(String teams) {
		log.info("Starting of isNumberOfTeamsCountDisplayed method");

		boolean NumberOfTeamsCount = false;
		try {
			if (txtBoxNumberOfTeams.getAttribute("value").equals(teams)) {
				System.out.println(txtBoxNumberOfTeams.getAttribute("value").equals(teams));
				NumberOfTeamsCount = true;
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		log.info("Ending of isNumberOfTeamsCountDisplayed method");

		return NumberOfTeamsCount;
	}

	public boolean isNumberOfCourtsFieldEnabled() {
		log.info("Starting of isNumberOfCourtsFieldEnabled method");
		log.info("Ending of isNumberOfCourtsFieldEnabled method");

		return txtBoxNumberOfCourts.isEnabled();
	}

	public void setNumberOfCourts(String numberOfCourts) {
		log.info("Starting of setNumberOfCourts method");

		try {
			clickUsingActionsClass(txtBoxNumberOfCourts);
		} catch (Exception e) {
			clickOnWebElement(txtBoxNumberOfCourts);
		}

		this.txtBoxNumberOfCourts.sendKeys(Keys.CONTROL + "a", Keys.BACK_SPACE);
		txtBoxNumberOfCourts.sendKeys(numberOfCourts);

		log.info("Ending of setNumberOfCourts method");
	}

	public boolean isNumberOfCourtsValidationDisplayed() {
		log.info("Starting of isNumberOfCourtsValidationDisplayed method");
		log.info("Ending of isNumberOfCourtsValidationDisplayed method");

		return lblNumberOfCourtsValidation.isDisplayed();
	}

	public void setWaitlist(String waitlist) {
		log.info("Starting of setWaitlist method");

		clickUsingActionsClass(txtBoxWaitlist);
		this.txtBoxWaitlist.sendKeys(Keys.CONTROL + "a", Keys.BACK_SPACE);
		txtBoxWaitlist.sendKeys(waitlist);

		log.info("Ending of setWaitlist method");

	}

	public boolean isWaitListCountDisplayed(String waitlist) {
		log.info("Starting of isWaitListCountDisplayed method");

		boolean WaitListCount = false;
		try {
			if (txtBoxWaitlist.getAttribute("value").equals(waitlist)) {
				System.out.println(txtBoxWaitlist.getAttribute("value").equals(waitlist));
				WaitListCount = true;
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		log.info("Ending of isWaitListCountDisplayed method");

		return WaitListCount;
	}

	public boolean isAddAnotherBracketPopUpContains() {
		log.info("Starting of isAddAnotherBracketPopUpContains method");

		boolean isAddAnotherBracketPopUpContains = false;

		if (isDisplayed(btnAddAnotherBracket) && isDisplayed(lblAddAnotherBracket)
				&& isDisplayed(btnNoContinueToSummary)) {

			isAddAnotherBracketPopUpContains = true;
		}

		log.info("Ending of isAddAnotherBracketPopUpContains method");

		return isAddAnotherBracketPopUpContains;
	}

	public void clickOnEditBracketsButton() {
		log.info("Starting of clickOnEditBracketsButton Method");

		elementClick(btnEditBracket);

		log.info("Ending of clickOnEditBracketsButtonMethod");

	}

	public boolean isPublishSuccessPopUpContains() {
		log.info("Starting of isPublishSuccessPopUpContains method");

		boolean isPublishSuccessPopUpContains = false;

		if (isDisplayed(lblEventSuccess) && isDisplayed(lblYourEventIsNowPublished)
				&& isDisplayed(lblEventSuccessClosePopup)) {

			isPublishSuccessPopUpContains = true;
		}

		log.info("Ending of isAddAnotherBracketPopUpContains method");

		return isPublishSuccessPopUpContains;
	}

	public boolean isAddNewBracketPageContainsDisplayed() {
		log.info("Starting of isAddNewBracketPageContainsDisplayed method");

		boolean isAddNewBracketPageContainsDisplayed = false;

		if (lblBracket2.isDisplayed() && lblAddBrackets.isDisplayed()) {
			isAddNewBracketPageContainsDisplayed = true;
		}

		log.info("Ending of isAddNewBracketPageContainsDisplayed method");

		return isAddNewBracketPageContainsDisplayed;
	}

	public boolean isDeleteBracketDisplayed() {
		log.info("Starting of isDeleteBracketDisplayed method");

		boolean isDeleteBracketDisplayed = false;
		try {
			if (btnDeleteBracket.isDisplayed()) {
				isDeleteBracketDisplayed = true;
			}
		} catch (Exception e) {
			isDeleteBracketDisplayed = false;
		}
		log.info("Ending of isDeleteBracketDisplayed method");

		return isDeleteBracketDisplayed;
	}

	public void clickOnEditEventDetailsButton() {
		log.info("Starting of clickOnEditEventDetailsButton Method");

		elementClick(btnEditEventDetails);

		log.info("Ending of clickOnEditEventDetailsButton Method");
	}

	public void clickOnCloseIconButton() {
		log.info("Starting of clickOnCloseIconButton Method");

		elementClick(btnClose);

		log.info("Ending of clickOnCloseIconButton Method");
	}

	public void clickonBracket1Button() {
		log.info("Starting of clickonBracket1Button method");

		try {
			clickUsingActionsClass(drpBracket1);
		} catch (Exception e) {
			clickOnWebElement(drpBracket1);
		}

		log.info("Ending of clickonBracket1Button method");
	}

	public void clickOnNoContinueToSummary() {
		log.info("Starting of clickOnNoContinueToSummary method");
		try {
			clickUsingActionsClass(btnNoContinueToSummary);
		} catch (Exception e) {
			clickOnWebElement(btnNoContinueToSummary);
		}

		log.info("Ending of clickOnNoContinueToSummary method");
	}

	public void clickOnPublishEventButton() {
		log.info("Starting of clickOnPublishEventButton method");

		elementClick(btnPublishEvent);

		log.info("Ending of clickOnPublishEventButton method");
	}

	public void clickOnEventSuccessClosePopupButton() {
		log.info("Starting of clickOnEventSuccessClosePopupButton method");

		this.waitForElementToBeVisible(lblEventSuccessClosePopup);
		elementClick(lblEventSuccessClosePopup);

		log.info("Ending of clickOnEventSuccessClosePopupButton method");
	}

	public void clickOnAddAnotherBracketButton() {
		log.info("Starting of clickOnAddAnotherBracketButton method");

		this.waitForElementToBeVisible(btnAddAnotherBracket);
		elementClick(btnAddAnotherBracket);

		log.info("Ending of clickOnAddAnotherBracketButton method");
	}

	public void clickOnDeleteBracketButton() {
		log.info("Starting of clickOnDeleteBracketButton method");

		this.waitForElementToBeVisible(btnDeleteBracket);
		elementClick(btnDeleteBracket);

		log.info("Ending of clickOnDeleteBracketButton method");
	}

	public boolean isRegistrationDetailsReqValidationDisplayed() {
		log.info("Starting of isRegistrationDetailsReqValidationDisplayed method");

		boolean isRegistrationDetailsReqValidationDisplayed = false;

		if (msgRegStartDateRequired.isDisplayed() && msgRegEndDateRequired.isDisplayed()) {

			isRegistrationDetailsReqValidationDisplayed = true;
		}

		log.info("Ending of isRegistrationDetailsReqValidationDisplayed method");

		return isRegistrationDetailsReqValidationDisplayed;
	}

	public boolean isRegistrationEndDateValidationDisplayed() {
		log.info("Starting of isRegistrationEndDateValidationDisplayed method");
		log.info("Ending of isRegistrationEndDateValidationDisplayed method");

		return msgRegEndDateofPrevStartDate.isDisplayed();
	}

	public boolean isCompetitionDatesRequiredValidationsDisplayed() {
		log.info("Starting of isCompetitionDatesRequiredValidationsDisplayed method");

		boolean isCompetitionDatesRequiredValidationsDisplayed = false;

		if (msgCompStartDateRequired.isDisplayed() && msgCompEndDateRequired.isDisplayed()) {

			isCompetitionDatesRequiredValidationsDisplayed = true;
		}

		log.info("Ending of isCompetitionDatesRequiredValidationsDisplayed method");

		return isCompetitionDatesRequiredValidationsDisplayed;
	}

	public boolean isCompetitionEndDatewithPreviousDateOfStartDateMsgDisplayed() {
		log.info("Starting of isCompetitionEndDatewithPreviousDateOfStartDateMsgDisplayed method");
		log.info("Ending of isCompetitionEndDatewithPreviousDateOfStartDateMsgDisplayed method");

		return msgCompEndDateofPrevStartDate.isDisplayed();
	}

	public boolean isComStartDateHighRegEndDateDisplayed() {
		log.info("Starting of isComStartDateHighRegEndDateDisplayed method");
		log.info("Ending of isComStartDateHighRegEndDateDisplayed method");

		return msgCompStartDateHighRegEndDate.isDisplayed();
	}

	public boolean isSummaryTextLabelDisplayed() {
		log.info("Starting of isSummaryTextLabelDisplayed method");
		log.info("Ending of isSummaryTextLabelDisplayed method");

		return lblSummaryText.isDisplayed();
	}

	public boolean isEventDetailsLabelWithEditIconDisplayed() {
		log.info("Starting of isEventDetailsLabelWithEditIconDisplayed method");
		log.info("Ending of isEventDetailsLabelWithEditIconDisplayed method");

		return lblEventDetailswithEditIcon.isDisplayed();
	}

	public boolean isEventNameTextLabelDisplayed() {
		log.info("Starting of isEventNameTextLabelDisplayed method");
		log.info("Ending of isEventNameTextLabelDisplayed method");

		return lblEventNameText.isDisplayed();
	}

	public boolean isEventLogoLabelDisplayed() {
		log.info("Starting of isEventLogoLabelDisplayed method");
		log.info("Ending of isEventLogoLabelDisplayed method");

		return lblEventLobgo.isDisplayed();
	}

	public boolean isMemberEntryFeeLabelDisplayed() {
		log.info("Starting of isMemberEntryFeeLabelDisplayed method");
		log.info("Ending of isMemberEntryFeeLabelDisplayed method");

		return lblMemberEntryFeeText.isDisplayed();
	}

	public boolean isNonMemberEntryFeeLabelDisplayed() {
		log.info("Starting of isNonMemberEntryFeeLabelDisplayed method");
		log.info("Ending of isNonMemberEntryFeeLabelDisplayed method");

		return lblNonMemberEntryFee.isDisplayed();
	}

	public boolean isMembershipPermissionLabelDisplayed() {
		log.info("Starting of isMembershipPermissionLabelDisplayed method");
		log.info("Ending of isMembershipPermissionLabelDisplayed method");

		return lblMembershipPermission.isDisplayed();
	}

	public boolean isDescriptionLabelDisplayed() {
		log.info("Starting of isDescriptionLabelDisplayed method");
		log.info("Ending of isDescriptionLabelDisplayed method");

		return lblDescriptionText.isDisplayed();
	}

	public boolean isEventPoliciesLabelwithEditIconDisplayed() {
		log.info("Starting of isEventPoliciesLabelwithEditIconDisplayed method");
		log.info("Ending of isEventPoliciesLabelwithEditIconDisplayed method");

		return lblEventPolicieswithEditIcon.isDisplayed();
	}

	public boolean isLiabilityWaiverLabelDisplayed() {
		log.info("Starting of isLiabilityWaiverLabelDisplayed method");
		log.info("Ending of isLiabilityWaiverLabelDisplayed method");

		return lblLiabilityWaiver.isDisplayed();
	}

	public boolean isRefundPolicyLabelDisplayed() {
		log.info("Starting of isRefundPolicyLabelDisplayed method");
		log.info("Ending of isRefundPolicyLabelDisplayed method");

		return lblRefundPolicy.isDisplayed();
	}

	public boolean isHealthAndSafteyLabelDisplayed() {
		log.info("Starting of isHealthAndSafteyLabelDisplayed method");
		log.info("Ending of isHealthAndSafteyLabelDisplayed method");

		return lblHealthAndSafetyPolicy.isDisplayed();
	}

	public boolean isBracketsLabelDisplayed() {
		log.info("Starting of isBracketsLabelDisplayed method");
		log.info("Ending of isBracketsLabelDisplayed method");

		return lblBrackets.isDisplayed();
	}

	public boolean isBracketEditButtonDisplayed() {
		log.info("Starting of isBracketEditButtonDisplayed method");
		log.info("Ending of isBracketEditButtonDisplayed method");

		return btnEditBracket.isDisplayed();
	}

	public boolean isBracketTypeLabelDisplayed() {
		log.info("Starting of isBracketTypeLabelDisplayed method");
		log.info("Ending of isBracketTypeLabelDisplayed method");

		return lblType.isDisplayed();
	}

	public boolean isPlayerGroupLabelDisplayed() {
		log.info("Starting of isPlayerGroupLabelDisplayed method");
		log.info("Ending of isPlayerGroupLabelDisplayed method");

		return lblPlayerGroup.isDisplayed();
	}

	public boolean isTimeZoneLabelDisplayed() {
		log.info("Starting of isTimeZoneLabelDisplayed method");
		log.info("Ending of isTimeZoneLabelDisplayed method");

		return lblTimeZone.isDisplayed();
	}

	public boolean isRegistrationStartDateLabelDisplayed() {
		log.info("Starting of isRegistrationStartDateLabelDisplayed method");
		log.info("Ending of isRegistrationStartDateLabelDisplayed method");

		return lblRegistrationStartDate.isDisplayed();
	}

	public boolean isRegistrationEndDateLabelDisplayed() {
		log.info("Starting of isRegistrationEndDateLabelDisplayed method");
		log.info("Ending of isRegistrationEndDateLabelDisplayed method");

		return lblRegistrationEndDate.isDisplayed();
	}

	public boolean isCompetitionStartDateLabelDisplayed() {
		log.info("Starting of isCompetitionStartDateLabelDisplayed method");
		log.info("Ending of isCompetitionStartDateLabelDisplayed method");

		return lblCompetitionStartDate.isDisplayed();
	}

	public boolean isCompetitionEndDateLabelDisplayed() {
		log.info("Starting of isCompetitionEndDateLabelDisplayed method");
		log.info("Ending of isCompetitionEndDateLabelDisplayed method");

		return lblCompetitionEndDate.isDisplayed();
	}

	public boolean isClubMemberPriceLabelDisplayed() {
		log.info("Starting of isClubMemberPriceLabelDisplayed method");
		log.info("Ending of isClubMemberPriceLabelDisplayed method");

		return lblClubMemberPrice.isDisplayed();
	}

	public boolean isClubNonMemberPriceLabelDisplayed() {
		log.info("Starting of isClubNonMemberPriceLabelDisplayed method");
		log.info("Ending of isClubNonMemberPriceLabelDisplayed method");

		return lblClubNonMemberPrice.isDisplayed();
	}

	public boolean isNumberOfTeamsLabelDisplayed() {
		log.info("Starting of isNumberOfTeamsLabelDisplayed method");
		log.info("Ending of isNumberOfTeamsLabelDisplayed method");

		return lblNumberOfTeams.isDisplayed();
	}

	public boolean isWaitListAllowanceLabelDisplayed() {
		log.info("Starting of isWaitListAllowanceLabelDisplayed method");
		log.info("Ending of isWaitListAllowanceLabelDisplayed method");

		return lblWaitlistAllowance.isDisplayed();
	}

	public boolean isMinimumAgeLabelDisplayed() {
		log.info("Starting of isMinimumAgeLabelDisplayed method");
		log.info("Ending of isMinimumAgeLabelDisplayed method");

		return lblMinimumAge.isDisplayed();
	}

	public boolean isMaximumAgeLabelDisplayed() {
		log.info("Starting of isMaximumAgeLabelDisplayed method");
		log.info("Ending of isMaximumAgeLabelDisplayed method");

		return lblMaximumAge.isDisplayed();
	}

	public boolean isMinimumRatingLabelDisplayed() {
		log.info("Starting of isMinimumRatingLabelDisplayed method");
		log.info("Ending of isMinimumRatingLabelDisplayed method");

		return lblMinimumRating.isDisplayed();
	}

	public boolean isMaximumRatingLabelDisplayed() {
		log.info("Starting of isMaximumRatingLabelDisplayed method");
		log.info("Ending of isMaximumRatingLabelDisplayed method");

		return lblMaximumRating.isDisplayed();
	}

	public boolean isGoBackButtonDisplayed() {
		log.info("Starting of isGoBackButtonDisplayed method");
		log.info("Ending of isGoBackButtonDisplayed method");

		return btnGoBack.isDisplayed();
	}

	public boolean isPublishEventButtonDisplayed() {
		log.info("Starting of isPublishEventButtonDisplayed method");
		log.info("Ending of isPublishEventButtonDisplayed method");

		return btnPublishEvent.isDisplayed();
	}

	public boolean isEditEventDetailsButtonDisplayed() {
		log.info("Starting of isEditEventDetailsButtonDisplayed method");
		log.info("Ending of isEditEventDetailsButtonDisplayed method");

		return btnEditEventDetails.isDisplayed();
	}

	public boolean isEditEventPoliciesButtonDisplayed() {
		log.info("Starting of isEditEventPoliciesButtonDisplayed method");
		log.info("Ending of isEditEventPoliciesButtonDisplayed method");

		return btnEditEventPolicies.isDisplayed();
	}

	public boolean isEventDetailsSectionDisplayed() {
		log.info("Starting of isEventDetailsSectionDisplayed method");

		boolean isEventDetailsSectionDisplayed = false;

		if (lblSummaryText.isDisplayed() && lblEventDetailswithEditIcon.isDisplayed()
				&& lblEventNameText.isDisplayed()) {

			isEventDetailsSectionDisplayed = true;
		}

		log.info("Ending of isEventDetailsSectionDisplayed method");

		return isEventDetailsSectionDisplayed;
	}

	public boolean isEventPoliciesSectionDisplayed() {
		log.info("Starting of isEventPoliciesSectionDisplayed method");

		boolean isEventPoliciesSectionDisplayed = false;

		if (lblEventPolicieswithEditIcon.isDisplayed() && lblLiabilityWaiver.isDisplayed()
				&& lblRefundPolicy.isDisplayed() && lblHealthAndSafetyPolicy.isDisplayed()) {

			isEventPoliciesSectionDisplayed = true;
		}

		log.info("Ending of isEventPoliciesSectionDisplayed method");

		return isEventPoliciesSectionDisplayed;
	}

	public boolean isBracketsSectionDisplayed() {
		log.info("Starting of isBracketsSectionDisplayed method");

		boolean isBracketsSectionDisplayed = false;

		if (lblBrackets.isDisplayed() && btnEditBracket.isDisplayed()) {

			isBracketsSectionDisplayed = true;
		}

		log.info("Ending of isBracketsSectionDisplayed method");

		return isBracketsSectionDisplayed;
	}

	public void clickonDeleteBracket() {
		log.info("Starting of isBracketsSectionDisplayed method");

		elementClick(btnDelteBracket);

		log.info("Ending of isBracketsSectionDisplayed method");
	}

	public boolean isDeleteBracketLabelDisplayed() {
		log.info("Starting of isDeleteBracketLabelDisplayed method");
		log.info("Ending of isDeleteBracketLabelDisplayed method");

		return lblDeleteBracket.isDisplayed();
	}

	public boolean isEventLabelDisplayed() {
		log.info("Starting of isEventLabelDisplayed method");
		log.info("Ending of isEventLabelDisplayed method");

		return lblEvent.isDisplayed();
	}

	public void clickOnCancelButton() {
		log.info("Starting of clickOnCancelButton method");

		elementClick(btnCancel);

		log.info("Ending of clickOnCancelButton method");
	}

	public void clickOnBackButton() {
		log.info("Starting of clickOnBackButton method");

		elementClick(btnBack);

		log.info("Ending of clickOnBackButton method");
	}

	public void clickOnConfirmButton() {
		log.info("Starting of clickOnConfirmButton method");

		elementClick(btnConfirm);

		log.info("Ending of clickOnConfirmButton method");
	}

	public void clickOnCloseButton() {
		log.info("Starting of clickOnCloseButton method");

		elementClick(btnClose);

		log.info("Ending of clickOnCloseButton method");
	}

	public void clickOnOkButton() {
		log.info("Starting of clickOnOkButton method");

		elementClick(btnSuccessOk);

		log.info("Ending of clickOnOkButton method");
	}

	public boolean isDeleteBracketPopUpDisplayed() {
		log.info("Starting of isDeleteBracketPopUpDisplayed method");

		boolean isDeleteBracketPopUpDisplayed = false;

		if (lblDeleteBracket.isDisplayed() && btnClose.isDisplayed() && btnCancel.isDisplayed()
				&& btnConfirm.isDisplayed()) {

			isDeleteBracketPopUpDisplayed = true;
		}

		log.info("Ending of isDeleteBracketPopUpDisplayed method");

		return isDeleteBracketPopUpDisplayed;
	}

	public boolean isDeleteBracketSuccessPopUpDisplayed() {
		log.info("Starting of isDeleteBracketSuccessPopUpDisplayed method");

		boolean isDeleteBracketSuccessPopUpDisplayed = false;

		try {
			if (lblBracketDeleteSuccess.isDisplayed() && lblEventSuccess.isDisplayed()
					&& lblEventSuccessClosePopup.isDisplayed() && btnSuccessOk.isDisplayed()) {

				isDeleteBracketSuccessPopUpDisplayed = true;
			}
		} catch (Exception e) {
			isDeleteBracketSuccessPopUpDisplayed = false;
		}

		log.info("Ending of isDeleteBracketSuccessPopUpDisplayed method");

		return isDeleteBracketSuccessPopUpDisplayed;
	}

	// Add Bracket Negative scenarios Methods

	public boolean isAddBracketPageEmptyFieldsValidationsDisplayed() {
		log.info("Starting of isAddBracketPageEmptyFieldsValidationsDisplayed method");

		boolean isAddBracketPageEmptyFieldsValidationsDisplayed = false;

		if (msgContainsErrors.isDisplayed() && msgBracketTypeRequired.isDisplayed()
				&& msgPlayerGroupRequired.isDisplayed() && msgMinAgeRequired.isDisplayed()
				&& msgMaxAgeRequired.isDisplayed() && msgMinRatingRequired.isDisplayed()
				&& msgMaxRatingRequired.isDisplayed() && msgBracketNameRequired.isDisplayed()
				&& msgEventTypeRequired.isDisplayed() && msgRegistrationStartDateRequired.isDisplayed()
				&& msgRegistrationEndDateRequired.isDisplayed() && msgCompetitionStartDateRequired.isDisplayed()
				&& msgCompetitionEndRequired.isDisplayed() && msgTimeZoneRequired.isDisplayed()
				&& msgClubMemberPriceRequired.isDisplayed() && msgClubNonMemberPrice.isDisplayed()
				&& msgNumberOfTeamsRequired.isDisplayed() && msgWaitListRequired.isDisplayed()) {

			isAddBracketPageEmptyFieldsValidationsDisplayed = true;
		}

		log.info("Ending of isAddBracketPageEmptyFieldsValidationsDisplayed method");

		return isAddBracketPageEmptyFieldsValidationsDisplayed;
	}

	public void setAgeRangeMinimum(String ageRangeMinimum) {
		log.info("Starting of setAgeRangeMinimum method");

		elementClick(txtAgeRangeMinimum);

		txtAgeRangeMinimum.sendKeys(ageRangeMinimum);

		log.info("Ending of setAgeRangeMinimum method");
	}

	public boolean isMinimumAgeValidationDisplayed() {
		log.info("Starting of isMinimumAgeValidationDisplayed method");
		log.info("Ending of isMinimumAgeValidationDisplayed method");

		return msgMinAgeValidation.isDisplayed();
	}

	public boolean isMaximumAgeValidationDisplayed() {
		log.info("Starting of isMaximumAgeValidationDisplayed method");
		log.info("Ending of isMaximumAgeValidationDisplayed method");

		return msgMaxAgeValidation.isDisplayed();
	}

	public boolean isMaxAgeIsHigherThanMinValidationDisplayed() {
		log.info("Starting of isMaxAgeIsHigherThanMinValidationDisplayed method");
		log.info("Ending of isMaxAgeIsHigherThanMinValidationDisplayed method");

		return msgMaxAgeIsHigherThanMinValidation.isDisplayed();
	}

	public boolean isMinimumRatingRangeMessageDisplayed() {
		log.info("Starting of isMinimumRatingRangeMessageDisplayed method");
		log.info("Ending of isMinimumRatingRangeMessageDisplayed method");

		return msgMinRatingRange.isDisplayed();
	}

	public boolean isMinRatingRangeValidationMessageDisplayed() {
		log.info("Starting of isMinRatingRangeValidationMessageDisplayed method");
		log.info("Ending of isMinRatingRangeValidationMessageDisplayed method");

		return msgMinRatingRangeValidation.isDisplayed();
	}

	public boolean isBracketNameAutoGenerated() {
		log.info("Starting of isBracketNameAutoGenerated method");
		log.info("Ending of isBracketNameAutoGenerated method");

		return lblBracketNameAutoGenerate.getAttribute("value").isEmpty();
	}

	public boolean isBracketClubMemNonMemValidationMsgDisplayed() {
		log.info("Starting of isBracketClubMemNonMemValidationMsgDisplayed method");

		boolean isBracketClubMemNonMemValidationMsgDisplayed = false;

		if (msgBracketClubnonmemPrice.isDisplayed() && msgBracketClubMemPrice.isDisplayed()) {

			isBracketClubMemNonMemValidationMsgDisplayed = true;
		}

		log.info("Ending of isBracketClubMemNonMemValidationMsgDisplayed method");

		return isBracketClubMemNonMemValidationMsgDisplayed;
	}

	public boolean isBracketNumberOfTeamsValidationMsgDisplayed() {
		log.info("Starting of isBracketNumberOfTeamsValidationMsgDisplayed method");
		log.info("Ending of isBracketNumberOfTeamsValidationMsgDisplayed method");

		return msgBracketNumberOfTeamsValidation.isDisplayed();
	}

	public boolean isBracketNumberOfTeamsMaxValidationMsgDisplayed() {
		log.info("Starting of isBracketNumberOfTeamsMaxValidationMsgDisplayed method");
		log.info("Ending of isBracketNumberOfTeamsMaxValidationMsgDisplayed method");

		return msgBracketNumberOfTeamsMaxValidation.isDisplayed();
	}

	public boolean isBracketWaitlistNegativeValidationMsgDisplayed() {
		log.info("Starting of isBracketWaitlistNegativeValidationMsgDisplayed method");
		log.info("Ending of isBracketWaitlistNegativeValidationMsgDisplayed method");

		return msgBracketWaitlistNegativeValidation.isDisplayed();
	}

	public boolean isBracketWaitListMaxValidationMsgDisplayed() {
		log.info("Starting of isBracketWaitListMaxValidationMsgDisplayed method");
		log.info("Ending of isBracketWaitListMaxValidationMsgDisplayed method");

		return msgBracketWaitlistMaxValidation.isDisplayed();
	}

	public boolean isMixedGroupSinglesValidationDisplayed() {
		log.info("Starting of isMixedGroupSinglesValidationDisplayed method");
		log.info("Ending of isMixedGroupSinglesValidationDisplayed method");

		return msgMixedGroupSinglesValidation.isDisplayed();
	}

	public boolean isNumberOfCourtsFieldDisabled() {
		log.info("Starting of isNumberOfCourtsFieldDisabled method");
		log.info("Ending of isNumberOfCourtsFieldDisabled method");

		return txtBoxNumberOfCourtsDisabled.isDisplayed();
	}

	public boolean isNumberOfTeamsFieldDisabled() {
		log.info("Starting of isNumberOfTeamsFieldDisabled method");
		log.info("Ending of isNumberOfTeamsFieldDisabled method");

		return txtWaterFallNumberOfTeams.isDisplayed();
	}

	public boolean isAddBracketsPageDisplayed() {
		log.info("Starting of isAddBracketsPageDisplayed method");
		log.info("Ending of isAddBracketsPageDisplayed method");

		return lblAddBrackets.isDisplayed();
	}

	public void addBrackets(String minAgeRange, String maxAgeRange, String minRatingRange, String maxRatingRange) {
		log.info("Starting of addBrackets method");

		this.hardWait(3);

		try {
			for (int i = 1; i <= 3; i++) {

				// this.clickUsingActionsClass(driver.findElement(By.xpath("(//h2[contains(text(),'Bracket
				// #')])[" + i + "]")));

				scrollDown(-400);
				hardWait(2);

				this.clickUsingActionsClass(driver.findElement(By.xpath(
						"(//h2[contains(text(),'Bracket #')]/ancestor::div[@id='panel1a-header']//following-sibling::div[contains(@class, 'MuiCollapse-root MuiCollapse-vertical')]//h3[text()='Type']/parent::div/div/div/div/div)["
								+ i + "]")));
				this.hardWait(3);
				this.selectDoublesMatchType();

				try {
					this.hardWait(3);
					this.clickUsingActionsClass(driver.findElement(By.xpath(
							"(//h2[contains(text(),'Bracket #')]/ancestor::div[@id='panel1a-header']//following-sibling::div[contains(@class, 'MuiCollapse-root MuiCollapse-vertical')]//h3[text()='Player Group']/parent::div/div/div/div/div//following-sibling::input)["
									+ i + "]")));
				} catch (Exception e) {
					clickOnWebElement(driver.findElement(By.xpath(
							"(//h2[contains(text(),'Bracket #')]/ancestor::div[@id='panel1a-header']//following-sibling::div[contains(@class, 'MuiCollapse-root MuiCollapse-vertical')]//h3[text()='Player Group']/parent::div/div/div/div/div//following-sibling::input)["
									+ i + "]")));
				}
				this.hardWait(2);
				this.selectMixedPlayerGroup();

				WebElement txtBoxMinAgeRange = driver.findElement(By.xpath(
						"(//h2[contains(text(),'Bracket #')]/ancestor::div[@id='panel1a-header']//following-sibling::div[contains(@class, 'MuiCollapse-root MuiCollapse-vertical')]//h3[text()='Age Range']/parent::div/div/div/div/div/h5[text()='Minimum']/parent::div/following-sibling::div/div/div/input)["
								+ i + "]"));

				this.clickUsingActionsClass(txtBoxMinAgeRange);
				this.sendKeys(txtBoxMinAgeRange, minAgeRange);
				hardWait(2);

				WebElement txtBoxMaxAgeRange = driver.findElement(By.xpath(
						"(//h2[contains(text(),'Bracket #')]/ancestor::div[@id='panel1a-header']//following-sibling::div[contains(@class, 'MuiCollapse-root MuiCollapse-vertical')]//h3[text()='Age Range']/parent::div/div/div/div/div/h5[text()='Maximum']/parent::div/following-sibling::div/div/div/input)["
								+ i + "]"));

				this.clickUsingActionsClass(txtBoxMaxAgeRange);
				this.sendKeys(txtBoxMaxAgeRange, maxAgeRange);

				hardWait(2);
				WebElement txtBoxMinRatingRange = driver.findElement(By.xpath(
						"(//h2[contains(text(),'Bracket #')]/ancestor::div[@id='panel1a-header']//following-sibling::div[contains(@class, 'MuiCollapse-root MuiCollapse-vertical')]//h3[text()='Rating Range']/parent::div/div/div/div/div/h5[text()='Minimum']/parent::div/following-sibling::div/div/div/input)["
								+ i + "]"));

				this.clickUsingActionsClass(txtBoxMinRatingRange);
				this.sendKeys(txtBoxMinRatingRange, minRatingRange);

				hardWait(2);
				WebElement txtBoxMaxRatingRange = driver.findElement(By.xpath(
						"(//h2[contains(text(),'Bracket #')]/ancestor::div[@id='panel1a-header']//following-sibling::div[contains(@class, 'MuiCollapse-root MuiCollapse-vertical')]//h3[text()='Rating Range']/parent::div/div/div/div/div/h5[text()='Maximum']/parent::div/following-sibling::div/div/div/input)["
								+ i + "]"));

				this.clickUsingActionsClass(txtBoxMaxRatingRange);
				this.sendKeys(txtBoxMaxRatingRange, maxRatingRange);

				this.hardWait(2);
				this.clickUsingActionsClass(driver.findElement(By.xpath(
						"(//h2[contains(text(),'Bracket #')]/ancestor::div[@id='panel1a-header']//following-sibling::div[contains(@class, 'MuiCollapse-root MuiCollapse-vertical')]//button[text()='Auto Generate']/parent::div)["
								+ i + "]")));

				scrollDown(300);
				hardWait(2);
				this.clickUsingActionsClass(driver.findElement(By.xpath(
						"(//h2[contains(text(),'Bracket #')]/ancestor::div[@id='panel1a-header']//following-sibling::div[contains(@class, 'MuiCollapse-root MuiCollapse-vertical')]//h3[text()='Event Type']/parent::div/div/div/div/input)["
								+ i + "]")));
				this.selectRoundRobinEvent();

				scrollDown(200);
				hardWait(2);
				this.clickUsingActionsClass(driver.findElement(By.xpath(
						"(//h2[contains(text(),'Bracket #')]/ancestor::div[@id='panel1a-header']//following-sibling::div[contains(@class, 'MuiCollapse-root MuiCollapse-vertical')]//h3[text()='Registration Date']/following-sibling::div//h5[text()='Start Date & Time']/parent::div/following-sibling::div//input)["
								+ i + "]")));

				int date = this.getCurrentDate();
				int regEndDate = this.getFutureDate(1);
				int compStartDate = this.getFutureDate(2);
				int compEndDate = this.getFutureDate(3);
				String hours = this.getCurrentHour();
				String meridiem = this.getCurrentMeridiem();

				this.clickOnCurrentDate(date);
				this.clickOnCurrentTime(meridiem);
				this.clickOnCurrentTime(hours);
				clickOnElementUsingActionClass(btnDefaultTimeInMinutes);

				try {
					if (btnOK.isDisplayed() == true) {
						this.clickOnWebElement(btnOK);
					}
				} catch (Exception e) {
					log.info("*** OK Button Haven't displayed***");
				}

				this.hardWait(2);
				this.clickUsingActionsClass(driver.findElement(By.xpath(
						"(//h2[contains(text(),'Bracket #')]/ancestor::div[@id='panel1a-header']//following-sibling::div[contains(@class, 'MuiCollapse-root MuiCollapse-vertical')]//h3[text()='Registration Date']/following-sibling::div//h5[text()='End Date & Time']/parent::div/following-sibling::div//input)["
								+ i + "]")));

				this.clickOnCurrentDate(regEndDate);
				this.clickOnCurrentTime(meridiem);
				try {
					clickUsingActionsClass(driver.findElement(By.xpath("//span[contains(text(),'" + hours + "')]")));
				} catch (Exception e) {
					clickOnWebElement(driver.findElement(By.xpath("//span[contains(text(),'" + hours + "')]")));
				}
				clickOnElementUsingActionClass(btnTimeInMinutes);

				try {
					if (btnOK.isDisplayed() == true) {
						this.clickOnWebElement(btnOK);
					}
				} catch (Exception e) {
					log.info("*** OK Button Haven't displayed***");
				}

				this.hardWait(2);
				this.clickUsingActionsClass(driver.findElement(By.xpath(
						"(//h2[contains(text(),'Bracket #')]/ancestor::div[@id='panel1a-header']//following-sibling::div[contains(@class, 'MuiCollapse-root MuiCollapse-vertical')]//h3[text()='Competition Date']/following-sibling::div//h5[text()='Start Date & Time']/parent::div/following-sibling::div//input)["
								+ i + "]")));

				this.clickOnCurrentDate(compStartDate);
				this.clickOnCurrentTime(meridiem);
				this.hardWait(2);
				try {
					clickUsingActionsClass(driver.findElement(By.xpath("//span[contains(text(),'" + hours + "')]")));
				} catch (Exception e) {
					clickOnWebElement(driver.findElement(By.xpath("//span[contains(text(),'" + hours + "')]")));
				}
				clickOnElementUsingActionClass(btnTimeInMinutes);

				try {
					if (btnOK.isDisplayed() == true) {
						this.clickOnWebElement(btnOK);
					}
				} catch (Exception e) {
					log.info("*** OK Button Haven't displayed***");
				}

				this.hardWait(2);
				this.clickUsingActionsClass(driver.findElement(By.xpath(
						"(//h2[contains(text(),'Bracket #')]/ancestor::div[@id='panel1a-header']//following-sibling::div[contains(@class, 'MuiCollapse-root MuiCollapse-vertical')]//h3[text()='Competition Date']/following-sibling::div//h5[text()='End Date & Time']/parent::div/following-sibling::div//input)["
								+ i + "]")));

				this.clickOnCurrentDate(compEndDate);
				this.clickOnCurrentTime(meridiem);
				try {
					clickUsingActionsClass(driver.findElement(By.xpath("//span[contains(text(),'" + hours + "')]")));
				} catch (Exception e) {
					clickOnWebElement(driver.findElement(By.xpath("//span[contains(text(),'" + hours + "')]")));
				}
				clickOnElementUsingActionClass(btnTimeInMinutes);

				try {
					if (btnOK.isDisplayed() == true) {
						this.clickOnWebElement(btnOK);
					}
				} catch (Exception e) {
					log.info("*** OK Button Haven't displayed***");
				}

				scrollDown(300);
				hardWait(2);
				this.clickUsingActionsClass(driver.findElement(By.xpath(
						"(//h2[contains(text(),'Bracket #')]/ancestor::div[@id='panel1a-header']//following-sibling::div[contains(@class, 'MuiCollapse-root MuiCollapse-vertical')]//h3[text()='Time Zone']/parent::div/div/div/div)["
								+ i + "]")));
				this.clickOnNewDelhiTimeZone();

				hardWait(2);
				WebElement txtBoxClubMemberPrice = driver.findElement(By.xpath(
						"(//h2[contains(text(),'Bracket #')]/ancestor::div[@id='panel1a-header']//following-sibling::div[contains(@class, 'MuiCollapse-root MuiCollapse-vertical')]//h3[text()='Bracket Price']/parent::div/div/div/div/div/h5[text()='Club Member Price']/parent::div/following-sibling::div/div/div/div/following-sibling::input)["
								+ i + "]"));
				this.clickUsingActionsClass(txtBoxClubMemberPrice);
				this.sendKeys(txtBoxClubMemberPrice, minAgeRange);

				hardWait(2);
				WebElement txtBoxNonClubMemberPrice = driver.findElement(By.xpath(
						"(//h2[contains(text(),'Bracket #')]/ancestor::div[@id='panel1a-header']//following-sibling::div[contains(@class, 'MuiCollapse-root MuiCollapse-vertical')]//h3[text()='Bracket Price']/parent::div/div/div/div/div/h5[text()='Club nonmember Price']/parent::div/following-sibling::div/div/div/div/following-sibling::input)["
								+ i + "]"));
				this.clickUsingActionsClass(txtBoxNonClubMemberPrice);
				this.sendKeys(txtBoxNonClubMemberPrice, minAgeRange);

				hardWait(2);
				WebElement txtBoxNumberOfTeams = driver.findElement(By.xpath(
						"(//h2[contains(text(),'Bracket #')]/ancestor::div[@id='panel1a-header']//following-sibling::div[contains(@class, 'MuiCollapse-root MuiCollapse-vertical')]//h3[text()='Number of Teams']/parent::div/div/div/div/div/div/input)["
								+ i + "]"));
				this.clickUsingActionsClass(txtBoxNumberOfTeams);
				this.sendKeys(txtBoxNumberOfTeams, minAgeRange);

				hardWait(2);
				WebElement txtBoxWaitlist = driver.findElement(By.xpath(
						"(//h2[contains(text(),'Bracket #')]/ancestor::div[@id='panel1a-header']//following-sibling::div[contains(@class, 'MuiCollapse-root MuiCollapse-vertical')]//h3[text()='Waitlist']/parent::div/div/div/div/div/div/input)["
								+ i + "]"));
				this.clickUsingActionsClass(txtBoxWaitlist);
				this.sendKeys(txtBoxWaitlist, minRatingRange);

				this.clickUsingActionsClass(driver.findElement(By.xpath("//button[text()='Next Step']")));

				this.clickOnAddAnotherBracketButton();
				// this.clickUsingActionsClass(
				// driver.findElement(By.xpath("(//h2[contains(text(),'Bracket #')])[" + i +
				// "]")));
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		this.hardWait(4);
		this.clickUsingActionsClass(driver.findElement(By.xpath("(//button[text()='Delete Bracket'])[3]")));

		log.info("Ending of addBrackets method");
	}

	// Combination methods

	public void selectMenPlayerGroup() {
		log.info("Starting of selectMenPlayerGroup method");

		elementClick(btnMenPlayerGroup);

		log.info("Ending of selectMenPlayerGroup method");
	}

	public void selectWomenPlayerGroup() {
		log.info("Starting of selectWomenPlayerGroup method");

		elementClick(btnWomenPlayerGroup);

		log.info("Ending of selectWomenPlayerGroup method");
	}

	public boolean isRegstartDateDisplayed() {
		log.info("Starting of isRegstartDateDisplayed method");
		log.info("Ending of isRegstartDateDisplayed method");

		return txtBoxRegistrationStartDate.isDisplayed();
	}

	public boolean isRegEndDateDisplayed() {
		log.info("Starting of isRegEndDateDisplayed method");
		log.info("Ending of isRegEndDateDisplayed method");

		return txtBoxRegistrationEndDate.isDisplayed();
	}

	public boolean isCompstartDateDisplayed() {
		log.info("Starting of isCompstartDateDisplayed method");
		log.info("Ending of isCompstartDateDisplayed method");

		return txtBoxCompetitionStartDate.isDisplayed();
	}

	public boolean isCompEndDateDisplayed() {
		log.info("Starting of isCompEndDateDisplayed method");
		log.info("Ending of isCompEndDateDisplayed method");

		return txtBoxCompetitionEndDate.isDisplayed();
	}

	public boolean isTimeZoneDropdownDisplayed() {
		log.info("Starting of isTimeZoneDropdownDisplayed method");
		log.info("Ending of isTimeZoneDropdownDisplayed method");

		return ddTimeZone.isDisplayed();
	}

	public String getRegistrationStartDateText() {
		log.info("Starting of getRegistrationStartDateText method");
		log.info("Ending of getRegistrationStartDateText method");

		return txtBoxRegistrationStartDate.getAttribute("value");
	}

	public String getRegistrationEndDateText() {

		log.info("Starting of getRegistrationEndDateText method");
		log.info("Ending of getRegistrationEndDateText method");

		return txtBoxRegistrationEndDate.getAttribute("value");
	}

	public String getCompetitionStartDateText() {
		log.info("Starting of getCompetitionStartDateText method");
		log.info("Ending of getCompetitionStartDateText method");

		return txtBoxCompetitionStartDate.getAttribute("value");
	}

	public String getCompetitionEndDateText() {
		log.info("Starting of getCompetitionEndDateText method");
		log.info("Ending of getCompetitionEndDateText method");

		return txtBoxCompetitionEndDate.getAttribute("value");
	}

	public void clickOnSaveChangesButton() {
		log.info("Starting of clickOnSaveChangesButton method");

		elementClick(btnSaveChanges);

		log.info("Ending of clickOnSaveChangesButton method");
	}

	public String getTimeZoneText() {
		log.info("Starting of getTimeZoneText method");
		log.info("Ending of getTimeZoneText method");

		return ddTimeZone.getText();
	}

	public void clickOnArizonaTimeZoneDropdown() {
		log.info("Starting of clickOnArizonaTimeZoneDropdown method");

		elementClick(btnArizona);

		log.info("Ending of clickOnArizonaTimeZoneDropdown method");
	}

	public void clickOnMatchTypeDropDownInAddABracket() {
		log.info("Starting of clickOnMatchTypeDropDownInAddABracket method");

		this.scrollUp(-800);
		this.waitForElementToBeVisible(ddMatchTypeInAddABracket);
		try {
			ddMatchTypeInAddABracket.click();
		} catch (Exception e) {

			clickOnWebElement(ddMatchTypeInAddABracket);
		}
		hardWait(2);

		log.info("Ending of clickOnMatchTypeDropDownInAddABracket method");
	}

	public boolean isRegCompAndTimeFieldsWithEmptyDetailsDisplayed() {
		log.info("Starting of isRegCompAndTimeFieldsWithEmptyDetailsDisplayed method");

		boolean isRegCompAndTimeFieldsWithEmptyDetailsDisplayed = false;

		if (msgRegistrationEndDateRequired.isDisplayed() && msgCompetitionStartDateRequired.isDisplayed()
				&& msgCompetitionEndRequired.isDisplayed() && msgTimeZoneRequired.isDisplayed()) {

			isRegCompAndTimeFieldsWithEmptyDetailsDisplayed = true;
		}

		log.info("Ending of isRegCompAndTimeFieldsWithEmptyDetailsDisplayed method");

		return isRegCompAndTimeFieldsWithEmptyDetailsDisplayed;
	}

	public void setRegistrationStartDateBeforeFourDays() {
		log.info("Starting of setRegistrationStartDateBeforeFourDays method");

		scrollDown(500);
		clickOnWebElement(txtBoxRegistrationStartDate);
		hardWait(3);

		try {
			int date = this.getPastDate(4);
			Month monthValue = this.getPreviousMonth(4);
			String mValue = monthValue.toString();
			System.out.println(mValue);

			String lblmonth = lblMonth.getText();
			String pNewTabValue = String.valueOf(lblmonth.split(" ")[0]).toUpperCase();
			log.debug("Text is " + pNewTabValue);
			System.out.println(mValue.equals(pNewTabValue));
			try {
				if (mValue.equals(pNewTabValue)) {
					this.clickOnCurrentDate(date);
				} else {
					clickUsingActionsClass(driver.findElement(By.xpath("//button[@title='Previous month']")));
					this.clickOnCurrentDate(date);
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			String hours = this.getCurrentHour();
			String meridiem = this.getCurrentMeridiem();

			this.clickOnCurrentTime(meridiem);
			this.clickOnCurrentTime(hours);
			clickOnElementUsingActionClass(btnTimeInMinutes);

			try {
				if (btnOK.isDisplayed() == true) {
					this.clickOnWebElement(btnOK);
				}
			} catch (Exception e) {
				log.info("*** OK Button Haven't displayed***");
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		log.info("Ending of setRegistrationStartDateBeforeFourDays method");
	}

	public int getPastDate(int days) {
		log.info("Starting of getPastDate method");

		LocalDateTime dateTime = LocalDateTime.now();
		LocalDateTime date = dateTime.minusDays(days);
		int dateValue = date.getDayOfMonth();
		System.out.println("Date Value = " + dateValue);

		log.info("Starting of getPastDate method");

		return dateValue;
	}

	public void setRegistrationEndDateBeforeThreeDays() {
		log.info("Starting of setRegistrationEndDateBeforeThreeDays method");

		clickOnWebElement(txtBoxRegistrationEndDate);
		hardWait(3);

		int date = this.getPastDate(3);
		Month monthValue = this.getPreviousMonth(3);
		String mValue = monthValue.toString();
		System.out.println(mValue);

		String lblmonth = lblMonth.getText();
		String pNewTabValue = String.valueOf(lblmonth.split(" ")[0]).toUpperCase().trim();
		log.debug("Text is " + pNewTabValue);

		try {
			if ((mValue).equals(pNewTabValue)) {
				this.clickOnCurrentDate(date);
			} else {
				clickUsingActionsClass(driver.findElement(By.xpath("//button[@title='Previous month']")));
				this.clickOnCurrentDate(date);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		String hours = this.getCurrentHour();
		String meridiem = this.getCurrentMeridiem();

		this.clickOnCurrentTime(meridiem);
		this.clickOnCurrentTime(hours);
		clickOnElementUsingActionClass(btnTimeInMinutes);

		try {
			if (btnOK.isDisplayed() == true) {
				this.clickOnWebElement(btnOK);
			}
		} catch (Exception e) {
			log.info("*** OK Button Haven't displayed***");
		}

		log.info("Ending of setRegistrationEndDateBeforeThreeDays method");
	}

	public void setCompetitionStartDateMoreThenSevenDays() {
		log.info("Starting of setCompetitionStartDateMoreThenSevenDays method");
		try {
			clickOnWebElement(txtBoxCompetitionStartDate);

		} catch (Exception e) {
			clickOnElementUsingActionClass(txtBoxCompetitionStartDate);
		}
		hardWait(3);
		int date = this.getFutureDate(9);
		Month monthValue = this.getFutureMonth(9);
		String mValue = monthValue.toString();
		System.out.println(mValue);

		String lblmonth = lblMonth.getText();
		String pNewTabValue = String.valueOf(lblmonth.split(" ")[0]).toUpperCase().trim();
		log.debug("Text is " + pNewTabValue);

		try {
			if ((mValue).equals(pNewTabValue)) {
				this.clickOnCurrentDate(date);
			} else {
				clickUsingActionsClass(driver.findElement(By.xpath("//button[@title='Next month']")));
				this.clickOnCurrentDate(date);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		String hours = this.getCurrentHour();
		String meridiem = this.getCurrentMeridiem();

		this.clickOnCurrentTime(meridiem);
		this.clickOnCurrentTime(hours);
		clickOnElementUsingActionClass(btnTimeInMinutes);

		try {
			if (btnOK.isDisplayed() == true) {
				this.clickOnWebElement(btnOK);
			}
		} catch (Exception e) {
			log.info("*** OK Button Haven't displayed***");
		}

		log.info("Ending of setCompetitionStartDateMoreThenSevenDays method");
	}

	public void setCompetitionStartDateBeforeTwoDays() {
		log.info("Starting of setCompetitionStartDateBeforeTwoDays method");

		clickOnWebElement(txtBoxCompetitionStartDate);
		hardWait(3);

		int date = this.getPastDate(2);
		Month monthValue = this.getPreviousMonth(2);
		String mValue = monthValue.toString();
		System.out.println(mValue);

		String lblmonth = lblMonth.getText();
		String pNewTabValue = String.valueOf(lblmonth.split(" ")[0]).toUpperCase().trim();
		log.debug("Text is " + pNewTabValue);

		try {
			if ((mValue).equals(pNewTabValue)) {
				this.clickOnCurrentDate(date);
			} else {
				clickUsingActionsClass(driver.findElement(By.xpath("//button[@title='Previous month']")));
				this.clickOnCurrentDate(date);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		String hours = this.getCurrentHour();
		String meridiem = this.getCurrentMeridiem();
		this.clickOnCurrentTime(hours);
		this.clickOnCurrentTime(meridiem);
		clickOnElementUsingActionClass(btnTimeInMinutes);
		try {
			if (btnOK.isDisplayed() == true) {
				this.clickOnWebElement(btnOK);
			}
		} catch (Exception e) {
			log.info("*** OK Button Haven't displayed***");
		}

		log.info("Ending of setCompetitionStartDateBeforeTwoDays method");
	}

	public void setCompetitionEndDateMoreThenSevenDays() {
		log.info("Starting of setCompetitionEndDateMoreThenSevenDays method");

		clickOnWebElement(txtBoxCompetitionEndDate);
		hardWait(3);
		int date = this.getFutureDate(10);
		System.out.println(date);
		Month monthValue = this.getFutureMonth(15);
		String mValue = monthValue.toString();
		System.out.println(mValue);

		String lblmonth = lblMonth.getText();
		String pNewTabValue = String.valueOf(lblmonth.split(" ")[0]).toUpperCase().trim();
		log.debug("Text is " + pNewTabValue);

		try {
			if ((mValue).equals(pNewTabValue)) {
				this.clickOnCurrentDate(date);
			} else {
				clickUsingActionsClass(driver.findElement(By.xpath("//button[@title='Next month']")));
				this.clickOnCurrentDate(date);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		String hours = this.getCurrentHour();
		String meridiem = this.getCurrentMeridiem();

		hardWait(3);
		this.clickOnCurrentTime(meridiem);
		this.clickOnCurrentTime(hours);
		clickOnElementUsingActionClass(btnTimeInMinutes);

		try {
			if (btnOK.isDisplayed() == true) {
				this.clickOnWebElement(btnOK);
			}
		} catch (Exception e) {
			log.info("*** OK Button Haven't displayed***");
		}

		log.info("Ending of setCompetitionEndDateMoreThenSevenDays method");
	}

	public void setCompetitionEndDateBeforeOneDay() {
		log.info("Starting of setCompetitionEndDateBeforeOneDay method");

		clickOnWebElement(txtBoxCompetitionEndDate);
		hardWait(3);

		int date = this.getPastDate(1);
		Month monthValue = this.getPreviousMonth(1);
		String mValue = monthValue.toString();
		System.out.println(mValue);

		String lblmonth = lblMonth.getText();
		String pNewTabValue = String.valueOf(lblmonth.split(" ")[0]).toUpperCase().trim();
		log.debug("Text is " + pNewTabValue);

		try {
			if ((mValue).equals(pNewTabValue)) {
				this.clickOnCurrentDate(date);
			} else {
				clickUsingActionsClass(driver.findElement(By.xpath("//button[@title='Previous month']")));
				this.clickOnCurrentDate(date);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		String hours = this.getCurrentHour();
		String meridiem = this.getCurrentMeridiem();
		hardWait(3);

		this.clickOnCurrentTime(meridiem);
		this.clickOnCurrentTime(hours);
		clickOnElementUsingActionClass(btnTimeInMinutes);

		try {
			if (btnOK.isDisplayed() == true) {
				this.clickOnWebElement(btnOK);
			}
		} catch (Exception e) {
			log.info("*** OK Button Haven't displayed***");
		}

		log.info("Ending of setCompetitionEndDateBeforeOneDay method");
	}

	public void scrollUp(int i) {
		log.info("Starting of scrollUp method");
		hardWait(2);
		this.scrollDown(i);
		hardWait(2);
		log.info("Ending of scrollUp method");
	}

	public void setCompetitionEndDateOneDay() {
		log.info("Starting of setCompetitionEndDateOneDay method");
		clickOnElementUsingActionClass(txtBoxCompetitionEndDate);
		hardWait(3);
		int date = this.getFutureDate(1);
		Month monthValue = this.getFutureMonth(1);
		String mValue = monthValue.toString();
		System.out.println(mValue);

		String lblmonth = lblMonth.getText();
		String pNewTabValue = String.valueOf(lblmonth.split(" ")[0]).toUpperCase().trim();
		log.debug("Text is " + pNewTabValue);

		try {
			if ((mValue).equals(pNewTabValue)) {
				this.clickOnCurrentDate(date);
			} else {
				clickUsingActionsClass(driver.findElement(By.xpath("//button[@title='Next month']")));
				this.clickOnCurrentDate(date);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		String hours = this.getCurrentHour();
		String meridiem = this.getCurrentMeridiem();
		hardWait(3);

		this.clickOnCurrentTime(meridiem);
		this.clickOnCurrentTime(hours);
		clickOnElementUsingActionClass(btnTimeInMinutes);

		try {
			if (btnOK.isDisplayed() == true) {
				this.clickOnWebElement(btnOK);
			}
		} catch (Exception e) {
			log.info("*** OK Button Haven't displayed***");
		}

		log.info("Ending of setCompetitionEndDateOneDay�method");
	}

	public void setRegistrationEndDateOneDay() {
		log.info("Starting of setRegistrationEndDateOneDay method");
		clickOnElementUsingActionClass(txtBoxRegistrationEndDate);
		hardWait(3);
		String pattern = "hh";

		LocalTime currentHour = LocalTime.now();
		LocalTime futureHour = currentHour.plusHours(8);
		String futureHourValue = futureHour.format(DateTimeFormatter.ofPattern(pattern));
		System.out.println(futureHourValue);

		log.info("Ending of setRegistrationEndDateOneDay�method");
	}

	public void setArizonaTimeZone() {
		log.info("Starting of setArizonaTimeZone method");
		hardWait(2);
		try {
			clickOnElementUsingActionClass(ddTimeZone);
		} catch (Exception e) {
			ddTimeZone.click();
		}
		hardWait(2);
		elementClick(btnArizona);
		hardWait(2);
		log.info("Ending of setArizonaTimeZone method");
	}

	public void setRegistrationEndDateMoreThenSevenDays() {
		log.info("Starting of setRegistrationEndDateMoreThenSevenDays method");

		clickOnWebElement(txtBoxRegistrationEndDate);
		hardWait(3);
		ZonedDateTime zonedDateTime = ZonedDateTime.now();
		System.out.println("Current Zoned date/time is :- \n" + zonedDateTime);

		int date = this.getFutureDate(8);
		Month monthValue = this.getFutureMonth(8);
		String mValue = monthValue.toString();
		System.out.println(mValue);

		String lblmonth = lblMonth.getText();
		String pNewTabValue = String.valueOf(lblmonth.split(" ")[0]).toUpperCase().trim();
		log.debug("Text is " + pNewTabValue);

		try {
			if ((mValue).equals(pNewTabValue)) {
				this.clickOnCurrentDate(date);
			} else {
				clickUsingActionsClass(driver.findElement(By.xpath("//button[@title='Next month']")));
				this.clickOnCurrentDate(date);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		String hours = this.getCurrentHour();
		String meridiem = this.getCurrentMeridiem();
		hardWait(3);

		this.clickOnCurrentTime(meridiem);
		this.clickOnCurrentTime(hours);
		clickOnElementUsingActionClass(btnTimeInMinutes);

		try {
			if (btnOK.isDisplayed() == true) {
				this.clickOnWebElement(btnOK);
			}
		} catch (Exception e) {
			log.info("*** OK Button Haven't displayed***");
		}

		log.info("Ending of setRegistrationEndDateMoreThenSevenDays method");
	}

	public void clickOnBracketCaretIcon() {
		log.info("Starting of clickOnBracketCaretIcon method");

		try {
			if (ddBracketCaretIcon.isDisplayed() == true) {
				log.info("***Bracket opened***");
			}
		} catch (NoSuchElementException e) {
			try {
				log.info("*** Bracket minimized ***");
				clickUsingActionsClass(ddBracketCaretIcon);
			} catch (Exception e1) {
				clickOnWebElement(ddBracketCaretIcon);
			}
		}

		log.info("Ending of clickOnBracketCaretIcon method");
	}

}
